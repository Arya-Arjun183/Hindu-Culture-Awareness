{"ast":null,"code":"import * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { NavigationContext } from 'react-navigation';\nimport Header from \"./Header\";\nimport { forSlideLeft, forSlideUp, forNoAnimation, forSlideRight } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport PreviousSceneContext from \"../../utils/PreviousSceneContext\";\nexport default function HeaderContainer(_ref) {\n  var mode = _ref.mode,\n      scenes = _ref.scenes,\n      layout = _ref.layout,\n      insets = _ref.insets,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      onContentHeightChange = _ref.onContentHeightChange,\n      gestureDirection = _ref.gestureDirection,\n      styleInterpolator = _ref.styleInterpolator,\n      style = _ref.style;\n  var focusedRoute = getFocusedRoute();\n  var parentPreviousScene = React.useContext(PreviousSceneContext);\n  return React.createElement(Animated.View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map(function (scene, i, self) {\n    var _getPreviousScene;\n\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n\n    var _ref2 = scene.descriptor.options || {},\n        header = _ref2.header,\n        _ref2$headerShown = _ref2.headerShown,\n        headerShown = _ref2$headerShown === void 0 ? true : _ref2$headerShown,\n        headerTransparent = _ref2.headerTransparent;\n\n    if (!headerShown) {\n      return null;\n    }\n\n    var isFocused = focusedRoute.key === scene.route.key;\n    var previous = (_getPreviousScene = getPreviousScene({\n      route: scene.route\n    })) !== null && _getPreviousScene !== void 0 ? _getPreviousScene : parentPreviousScene;\n    var previousScene = self[i - 1];\n    var nextScene = self[i + 1];\n\n    var _ref3 = (previousScene === null || previousScene === void 0 ? void 0 : previousScene.descriptor.options) || {},\n        _ref3$headerShown = _ref3.headerShown,\n        previousHeaderShown = _ref3$headerShown === void 0 ? true : _ref3$headerShown;\n\n    var _ref4 = (nextScene === null || nextScene === void 0 ? void 0 : nextScene.descriptor.options) || {},\n        _ref4$headerShown = _ref4.headerShown,\n        nextHeaderShown = _ref4$headerShown === void 0 ? true : _ref4$headerShown;\n\n    var isHeaderStatic = previousHeaderShown === false && !nextScene || nextHeaderShown === false;\n    var props = {\n      mode: mode,\n      layout: layout,\n      insets: insets,\n      scene: scene,\n      previous: previous,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? forSlideUp : gestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : styleInterpolator : forNoAnimation\n    };\n    return React.createElement(NavigationContext.Provider, {\n      key: scene.route.key,\n      value: scene.descriptor.navigation\n    }, React.createElement(React.Fragment, null, React.createElement(View, {\n      onLayout: onContentHeightChange ? function (e) {\n        var height = e.nativeEvent.layout.height;\n        onContentHeightChange({\n          route: scene.route,\n          height: height\n        });\n      } : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : React.createElement(Header, props))));\n  }));\n}\nvar styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":{"version":3,"sources":["HeaderContainer.tsx"],"names":["style","focusedRoute","getFocusedRoute","parentPreviousScene","React","mode","i","self","headerShown","headerTransparent","scene","isFocused","previous","getPreviousScene","route","previousScene","nextScene","previousHeaderShown","nextHeaderShown","isHeaderStatic","props","layout","insets","navigation","styleInterpolator","gestureDirection","forNoAnimation","onContentHeightChange","e","height","styles","header","position","top","left","right"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport { NavigationContext } from 'react-navigation';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport Header from './Header';\nimport {\n  forSlideLeft,\n  forSlideUp,\n  forNoAnimation,\n  forSlideRight,\n} from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport type {\n  Layout,\n  Route,\n  Scene,\n  StackHeaderStyleInterpolator,\n  StackNavigationProp,\n  GestureDirection,\n} from '../../types';\n\nexport type Props = {\n  mode: 'float' | 'screen';\n  layout: Layout;\n  insets: EdgeInsets;\n  scenes: (Scene<Route<string>> | undefined)[];\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  onContentHeightChange?: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  styleInterpolator: StackHeaderStyleInterpolator;\n  gestureDirection: GestureDirection;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style,\n}: Props) {\n  const focusedRoute = getFocusedRoute();\n  const parentPreviousScene = React.useContext(PreviousSceneContext);\n\n  return (\n    <Animated.View pointerEvents=\"box-none\" style={style}>\n      {scenes.slice(-3).map((scene, i, self) => {\n        if ((mode === 'screen' && i !== self.length - 1) || !scene) {\n          return null;\n        }\n\n        const { header, headerShown = true, headerTransparent } =\n          scene.descriptor.options || {};\n\n        if (!headerShown) {\n          return null;\n        }\n\n        const isFocused = focusedRoute.key === scene.route.key;\n        const previous =\n          getPreviousScene({ route: scene.route }) ?? parentPreviousScene;\n\n        // If the screen is next to a headerless screen, we need to make the header appear static\n        // This makes the header look like it's moving with the screen\n        const previousScene = self[i - 1];\n        const nextScene = self[i + 1];\n\n        const { headerShown: previousHeaderShown = true } =\n          previousScene?.descriptor.options || {};\n\n        const { headerShown: nextHeaderShown = true } =\n          nextScene?.descriptor.options || {};\n\n        const isHeaderStatic =\n          (previousHeaderShown === false &&\n            // We still need to animate when coming back from next scene\n            // A hacky way to check this is if the next scene exists\n            !nextScene) ||\n          nextHeaderShown === false;\n\n        const props = {\n          mode,\n          layout,\n          insets,\n          scene,\n          previous,\n          navigation: scene.descriptor.navigation as StackNavigationProp,\n          styleInterpolator:\n            mode === 'float'\n              ? isHeaderStatic\n                ? gestureDirection === 'vertical' ||\n                  gestureDirection === 'vertical-inverted'\n                  ? forSlideUp\n                  : gestureDirection === 'horizontal-inverted'\n                  ? forSlideRight\n                  : forSlideLeft\n                : styleInterpolator\n              : forNoAnimation,\n        };\n\n        return (\n          <NavigationContext.Provider\n            key={scene.route.key}\n            value={scene.descriptor.navigation}\n          >\n            <>\n              <View\n                onLayout={\n                  onContentHeightChange\n                    ? (e) => {\n                        const { height } = e.nativeEvent.layout;\n\n                        onContentHeightChange({\n                          route: scene.route,\n                          height,\n                        });\n                      }\n                    : undefined\n                }\n                pointerEvents={isFocused ? 'box-none' : 'none'}\n                accessibilityElementsHidden={!isFocused}\n                importantForAccessibility={\n                  isFocused ? 'auto' : 'no-hide-descendants'\n                }\n                style={\n                  // Avoid positioning the focused header absolutely\n                  // Otherwise accessibility tools don't seem to be able to find it\n                  (mode === 'float' && !isFocused) || headerTransparent\n                    ? styles.header\n                    : null\n                }\n              >\n                {header !== undefined ? header(props) : <Header {...props} />}\n              </View>\n            </>\n          </NavigationContext.Provider>\n        );\n      })}\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
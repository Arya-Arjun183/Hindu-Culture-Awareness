{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { MaybeScreenContainer, MaybeScreen, shouldUseActivityState } from \"../Screens\";\nimport { getDefaultHeaderHeight } from \"../Header/HeaderSegment\";\nimport CardContainer from \"./CardContainer\";\nimport { DefaultTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport { forNoAnimation as forNoAnimationHeader } from \"../../TransitionConfigs/HeaderStyleInterpolators\";\nimport { forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nvar EPSILON = 0.01;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\n\nvar getHeaderHeights = function getHeaderHeights(routes, insets, isParentHeaderShown, descriptors, layout, previous) {\n  return routes.reduce(function (acc, curr) {\n    var _ref = descriptors[curr.key] || {},\n        _ref$options = _ref.options,\n        options = _ref$options === void 0 ? {} : _ref$options;\n\n    var style = StyleSheet.flatten(options.headerStyle || {});\n    var height = typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    var safeAreaInsets = _objectSpread(_objectSpread({}, insets), options.safeAreaInsets);\n\n    var _options$headerStatus = options.headerStatusBarHeight,\n        headerStatusBarHeight = _options$headerStatus === void 0 ? isParentHeaderShown ? 0 : safeAreaInsets.top : _options$headerStatus;\n    acc[curr.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\n\nvar getDistanceFromOptions = function getDistanceFromOptions(mode, layout, descriptor) {\n  var _ref2 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n      _ref2$gestureDirectio = _ref2.gestureDirection,\n      gestureDirection = _ref2$gestureDirectio === void 0 ? mode === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref2$gestureDirectio;\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nvar getProgressFromGesture = function getProgressFromGesture(mode, gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions(mode, {\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\n\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n\n  var _super = _createSuper(CardStack);\n\n  function CardStack(_props) {\n    var _this;\n\n    _classCallCheck(this, CardStack);\n\n    _this = _super.call(this, _props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, layout, state.headerHeights)\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref3) {\n      var route = _ref3.route,\n          height = _ref3.height;\n\n      _this.setState(function (_ref4) {\n        var headerHeights = _ref4.headerHeights;\n        var previousHeight = headerHeights[route.key];\n\n        if (previousHeight === height) {\n          return null;\n        }\n\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref5) {\n      var route = _ref5.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n\n      return undefined;\n    });\n\n    var _Dimensions$get = Dimensions.get('window'),\n        _Dimensions$get$heigh = _Dimensions$get.height,\n        _height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh,\n        _Dimensions$get$width = _Dimensions$get.width,\n        _width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width;\n\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: {\n        height: _height,\n        width: _width\n      },\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          insets = _this$props.insets,\n          descriptors = _this$props.descriptors,\n          state = _this$props.state,\n          routes = _this$props.routes,\n          closingRouteKeys = _this$props.closingRouteKeys,\n          onOpenRoute = _this$props.onOpenRoute,\n          onCloseRoute = _this$props.onCloseRoute,\n          getGesturesEnabled = _this$props.getGesturesEnabled,\n          renderHeader = _this$props.renderHeader,\n          renderScene = _this$props.renderScene,\n          headerMode = _this$props.headerMode,\n          isParentHeaderShown = _this$props.isParentHeaderShown,\n          onTransitionStart = _this$props.onTransitionStart,\n          onTransitionEnd = _this$props.onTransitionEnd,\n          onPageChangeStart = _this$props.onPageChangeStart,\n          onPageChangeConfirm = _this$props.onPageChangeConfirm,\n          onPageChangeCancel = _this$props.onPageChangeCancel,\n          onGestureStart = _this$props.onGestureStart,\n          onGestureEnd = _this$props.onGestureEnd,\n          onGestureCancel = _this$props.onGestureCancel,\n          _this$props$detachIna = _this$props.detachInactiveScreens,\n          detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || shouldUseActivityState : _this$props$detachIna;\n      var _this$state = this.state,\n          scenes = _this$state.scenes,\n          layout = _this$state.layout,\n          gestures = _this$state.gestures,\n          headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedDescriptor = descriptors[focusedRoute.key];\n      var focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var defaultTransitionPreset = mode === 'modal' ? ModalTransition : DefaultTransition;\n\n      if (headerMode === 'screen') {\n        defaultTransitionPreset = _objectSpread(_objectSpread({}, defaultTransitionPreset), {}, {\n          headerStyleInterpolator: forNoAnimationHeader\n        });\n      }\n\n      var _ref6 = focusedOptions.safeAreaInsets || {},\n          _ref6$top = _ref6.top,\n          top = _ref6$top === void 0 ? insets.top : _ref6$top,\n          _ref6$right = _ref6.right,\n          right = _ref6$right === void 0 ? insets.right : _ref6$right,\n          _ref6$bottom = _ref6.bottom,\n          bottom = _ref6$bottom === void 0 ? insets.bottom : _ref6$bottom,\n          _ref6$left = _ref6.left,\n          left = _ref6$left === void 0 ? insets.left : _ref6$left;\n\n      var activeScreensLimit = 1;\n\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var _scenes$i$descriptor$ = scenes[i].descriptor.options.detachPreviousScreen,\n            detachPreviousScreen = _scenes$i$descriptor$ === void 0 ? mode === 'modal' ? i !== scenes.length - 1 : true : _scenes$i$descriptor$;\n\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          break;\n        }\n      }\n\n      var isFloatHeaderAbsolute = headerMode === 'float' ? this.state.scenes.slice(-2).some(function (scene) {\n        var descriptor = scene.descriptor;\n        var options = descriptor ? descriptor.options : {};\n        var headerTransparent = options.headerTransparent,\n            _options$headerShown = options.headerShown,\n            headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n\n        if (headerTransparent || headerShown === false) {\n          return true;\n        }\n\n        return false;\n      }) : false;\n      var floatingHeader = headerMode === 'float' ? React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        insets: {\n          top: top,\n          right: right,\n          bottom: bottom,\n          left: left\n        },\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        gestureDirection: focusedOptions.gestureDirection !== undefined ? focusedOptions.gestureDirection : defaultTransitionPreset.gestureDirection,\n        styleInterpolator: focusedOptions.headerStyleInterpolator !== undefined ? focusedOptions.headerStyleInterpolator : defaultTransitionPreset.headerStyleInterpolator,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      })) : null;\n      return React.createElement(React.Fragment, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n\n        if (shouldUseActivityState || Platform.OS === 'web') {\n          if (index < self.length - activeScreensLimit - 1) {\n            isScreenActive = STATE_INACTIVE;\n          } else {\n            var sceneForActivity = scenes[self.length - 1];\n            var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n            isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n              inputRange: [0, 1 - EPSILON, 1],\n              outputRange: [1, 1, outputValue],\n              extrapolate: 'clamp'\n            }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n          }\n        } else {\n          isScreenActive = scene.progress.next ? scene.progress.next.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, 0],\n            extrapolate: 'clamp'\n          }) : 1;\n        }\n\n        var _ref7 = scene.descriptor ? scene.descriptor.options : {},\n            safeAreaInsets = _ref7.safeAreaInsets,\n            _ref7$headerShown = _ref7.headerShown,\n            headerShown = _ref7$headerShown === void 0 ? true : _ref7$headerShown,\n            headerTransparent = _ref7.headerTransparent,\n            cardShadowEnabled = _ref7.cardShadowEnabled,\n            cardOverlayEnabled = _ref7.cardOverlayEnabled,\n            cardOverlay = _ref7.cardOverlay,\n            cardStyle = _ref7.cardStyle,\n            animationEnabled = _ref7.animationEnabled,\n            gestureResponseDistance = _ref7.gestureResponseDistance,\n            gestureVelocityImpact = _ref7.gestureVelocityImpact,\n            _ref7$gestureDirectio = _ref7.gestureDirection,\n            gestureDirection = _ref7$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref7$gestureDirectio,\n            _ref7$transitionSpec = _ref7.transitionSpec,\n            transitionSpec = _ref7$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref7$transitionSpec,\n            _ref7$cardStyleInterp = _ref7.cardStyleInterpolator,\n            cardStyleInterpolator = _ref7$cardStyleInterp === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref7$cardStyleInterp,\n            _ref7$headerStyleInte = _ref7.headerStyleInterpolator,\n            headerStyleInterpolator = _ref7$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref7$headerStyleInte;\n\n        var transitionConfig = {\n          gestureDirection: gestureDirection,\n          transitionSpec: transitionSpec,\n          cardStyleInterpolator: cardStyleInterpolator,\n          headerStyleInterpolator: headerStyleInterpolator\n        };\n\n        if (index !== self.length - 1) {\n          var nextScene = scenes[index + 1];\n\n          if (nextScene) {\n            var _ref8 = nextScene.descriptor ? nextScene.descriptor.options : {},\n                _animationEnabled = _ref8.animationEnabled,\n                _ref8$gestureDirectio = _ref8.gestureDirection,\n                _gestureDirection = _ref8$gestureDirectio === void 0 ? defaultTransitionPreset.gestureDirection : _ref8$gestureDirectio,\n                _ref8$transitionSpec = _ref8.transitionSpec,\n                _transitionSpec = _ref8$transitionSpec === void 0 ? defaultTransitionPreset.transitionSpec : _ref8$transitionSpec,\n                _ref8$cardStyleInterp = _ref8.cardStyleInterpolator,\n                _cardStyleInterpolator = _ref8$cardStyleInterp === void 0 ? _animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _ref8$cardStyleInterp,\n                _ref8$headerStyleInte = _ref8.headerStyleInterpolator,\n                _headerStyleInterpolator = _ref8$headerStyleInte === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _ref8$headerStyleInte;\n\n            transitionConfig = {\n              gestureDirection: _gestureDirection,\n              transitionSpec: _transitionSpec,\n              cardStyleInterpolator: _cardStyleInterpolator,\n              headerStyleInterpolator: _headerStyleInterpolator\n            };\n          }\n        }\n\n        var _ref9 = safeAreaInsets || {},\n            _ref9$top = _ref9.top,\n            safeAreaInsetTop = _ref9$top === void 0 ? insets.top : _ref9$top,\n            _ref9$right = _ref9.right,\n            safeAreaInsetRight = _ref9$right === void 0 ? insets.right : _ref9$right,\n            _ref9$bottom = _ref9.bottom,\n            safeAreaInsetBottom = _ref9$bottom === void 0 ? insets.bottom : _ref9$bottom,\n            _ref9$left = _ref9.left,\n            safeAreaInsetLeft = _ref9$left === void 0 ? insets.left : _ref9$left;\n\n        var headerHeight = headerMode !== 'none' && headerShown !== false ? headerHeights[route.key] : 0;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, _extends({\n          index: index,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          cardOverlay: cardOverlay,\n          cardOverlayEnabled: cardOverlayEnabled,\n          cardShadowEnabled: cardShadowEnabled,\n          cardStyle: cardStyle,\n          onPageChangeStart: onPageChangeStart,\n          onPageChangeConfirm: onPageChangeConfirm,\n          onPageChangeCancel: onPageChangeCancel,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          gestureResponseDistance: gestureResponseDistance,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          mode: mode,\n          headerMode: headerMode,\n          headerShown: headerShown,\n          hasAbsoluteHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          gestureEnabled: index !== 0 && getGesturesEnabled({\n            route: route\n          }),\n          gestureVelocityImpact: gestureVelocityImpact\n        }, transitionConfig)));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n\n        var _ref10 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n            animationEnabled = _ref10.animationEnabled;\n\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(props.mode, state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      return {\n        routes: props.routes,\n        scenes: props.routes.map(function (route, index, self) {\n          var previousRoute = self[index - 1];\n          var nextRoute = self[index + 1];\n          var oldScene = state.scenes[index];\n          var currentGesture = gestures[route.key];\n          var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n          var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n          var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n          var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n          var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n          var scene = {\n            route: route,\n            descriptor: descriptor,\n            progress: {\n              current: getProgressFromGesture(props.mode, currentGesture, state.layout, descriptor),\n              next: nextGesture ? getProgressFromGesture(props.mode, nextGesture, state.layout, nextDescriptor) : undefined,\n              previous: previousGesture ? getProgressFromGesture(props.mode, previousGesture, state.layout, previousDescriptor) : undefined\n            },\n            __memo: [route, state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n          };\n\n          if (oldScene && scene.__memo.every(function (it, i) {\n            return oldScene.__memo[i] === it;\n          })) {\n            return oldScene;\n          }\n\n          return scene;\n        }),\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(props.routes, props.insets, props.isParentHeaderShown, state.descriptors, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n\n  return CardStack;\n}(React.Component);\n\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["forNoAnimation","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","options","getHeaderHeights","descriptors","curr","style","StyleSheet","height","previous","safeAreaInsets","headerStatusBarHeight","isParentHeaderShown","top","acc","getDefaultHeaderHeight","getDistanceFromOptions","gestureDirection","mode","ModalTransition","DefaultTransition","getDistanceForDirection","getProgressFromGesture","distance","width","Math","layout","inputRange","outputRange","React","props","state","gestures","descriptor","animationEnabled","Animated","routes","scenes","previousRoute","self","index","nextRoute","oldScene","currentGesture","route","previousGesture","nextGesture","nextDescriptor","previousDescriptor","scene","progress","current","next","undefined","__memo","headerHeights","constructor","Dimensions","e","previousHeight","getPreviousRoute","previousScene","render","detachInactiveScreens","Platform","shouldUseActivityState","focusedRoute","focusedDescriptor","focusedOptions","focusedHeaderHeight","defaultTransitionPreset","headerMode","headerStyleInterpolator","forNoAnimationHeader","insets","right","bottom","left","activeScreensLimit","i","detachPreviousScreen","isFloatHeaderAbsolute","headerShown","headerTransparent","floatingHeader","renderHeader","getPreviousScene","getFocusedRoute","onContentHeightChange","styleInterpolator","styles","handleLayout","focused","gesture","isScreenActive","sceneForActivity","outputValue","extrapolate","transitionSpec","cardStyleInterpolator","transitionConfig","nextScene","safeAreaInsetTop","safeAreaInsetRight","safeAreaInsetBottom","safeAreaInsetLeft","headerHeight","closingRouteKeys","getGesturesEnabled","gestureVelocityImpact","container","flex","absolute","position","floating","zIndex"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;;AAWA,SAAA,oBAAA,EAAA,WAAA,EAAA,sBAAA;AAKA,SAAA,sBAAA;AAEA,OAAA,aAAA;AACA,SAAA,iBAAA,EAAA,eAAA;AAIA,SAASA,cAAc,IAAvB,oBAAA;AACA,SAASA,cAAc,IAAvB,kBAAA;AACA,OAAA,uBAAA;AAyDA,IAAMC,OAAO,GAAb,IAAA;AAEA,IAAMC,cAAc,GAApB,CAAA;AACA,IAAMC,gCAAgC,GAAtC,CAAA;AACA,IAAMC,YAAY,GAAlB,CAAA;AAEA,IAAMC,mBAAmB,GAAG,MAAM,CAAN,MAAA,CAAc;EAAEC,OAAO,EAAE;AAAX,CAAd,CAA5B;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,MAAA,EAAA,MAAA,EAAA,mBAAA,EAAA,WAAA,EAAA,MAAA,EAAA,QAAA,EAOpB;EACH,OAAO,MAAM,CAAN,MAAA,CAAsC,UAAA,GAAA,EAAA,IAAA,EAAe;IAC1D,WAAyBC,WAAW,CAACC,IAAI,CAAhBD,GAAW,CAAXA,IAAzB,EAAA;IAAA,wBAAQF,OAAR;IAAA,IAAQA,OAAR,6BAAkB,EAAlB;;IACA,IAAMI,KAAU,GAAGC,UAAU,CAAVA,OAAAA,CAAmBL,OAAO,CAAPA,WAAAA,IAAtC,EAAmBK,CAAnB;IAEA,IAAMC,MAAM,GACV,OAAOF,KAAK,CAAZ,MAAA,KAAA,QAAA,GAAmCA,KAAK,CAAxC,MAAA,GAAkDG,QAAQ,CAACJ,IAAI,CADjE,GAC4D,CAD5D;;IAGA,IAAMK,cAAc,mCAAG,MAAH,GAEfR,OAAO,CAACQ,cAFO,CAApB;;IAKA,4BAAA,OAAA,CACEC,qBADF;IAAA,IACEA,qBADF,sCAC0BC,mBAAmB,GAAA,CAAA,GAAOF,cAAc,CAACG,GADnE;IAIAC,GAAG,CAACT,IAAI,CAARS,GAAG,CAAHA,GACE,OAAA,MAAA,KAAA,QAAA,GAAA,MAAA,GAEIC,sBAAsB,CAAA,MAAA,EAH5BD,qBAG4B,CAH5BA;IAKA,OAAA,GAAA;EArBK,CAAA,EAAP,EAAO,CAAP;AARF,CAAA;;AAiCA,IAAME,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,IAAA,EAAA,MAAA,EAAA,UAAA,EAI1B;EACH,YAII,CAAA,UAAU,KAAV,IAAA,IAAA,UAAU,KAAA,KAAV,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAV,OAAA,KAJJ,EAAA;EAAA,kCACEC,gBADF;EAAA,IACEA,gBADF,sCACqBC,IAAI,KAAJA,OAAAA,GACfC,eAAe,CADAD,gBAAAA,GAEfE,iBAAiB,CAACH,gBAHxB;;EAMA,OAAOI,uBAAuB,CAAA,MAAA,EAA9B,gBAA8B,CAA9B;AAXF,CAAA;;AAcA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,IAAA,EAAA,OAAA,EAAA,MAAA,EAAA,UAAA,EAK1B;EACH,IAAMC,QAAQ,GAAGP,sBAAsB,CAAA,IAAA,EAErC;IAGEQ,KAAK,EAAEC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYC,MAAM,CAH3B,KAGSD,CAHT;IAIEjB,MAAM,EAAEiB,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYC,MAAM,CAAlBD,MAAAA;EAJV,CAFqC,EAAvC,UAAuC,CAAvC;;EAWA,IAAIF,QAAQ,GAAZ,CAAA,EAAkB;IAChB,OAAO,OAAO,CAAP,WAAA,CAAoB;MACzBI,UAAU,EAAE,CAAA,CAAA,EADa,QACb,CADa;MAEzBC,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA;IAFY,CAApB,CAAP;EAID;;EAED,OAAO,OAAO,CAAP,WAAA,CAAoB;IACzBD,UAAU,EAAE,CAAA,QAAA,EADa,CACb,CADa;IAEzBC,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA;EAFY,CAApB,CAAP;AAxBF,CAAA;;IA8Be,S;;;;;EAoHb4B,mBAAW,MAAXA,EAA0B;IAAA;;IAAA;;IACxB,0BAAA,MAAA;;IADwB,eAAA,gCAAA,cAAA,EAoBFE,UAAAA,CAAD,EAA0B;MAC/C,4BAA0BA,CAAC,CAADA,WAAAA,CAA1B,MAAA;MAAA,IAAM,MAAN,yBAAM,MAAN;MAAA,IAAgBlC,KAAhB,yBAAgBA,KAAhB;MAEA,IAAME,MAAM,GAAG;QAAEF,KAAF,EAAEA,KAAF;QAAShB,MAAAA,EAAAA;MAAT,CAAf;;MAEA,MAAA,QAAA,CAAc,UAAA,KAAA,EAAA,KAAA,EAAkB;QAC9B,IAAIA,MAAM,KAAKuB,KAAK,CAALA,MAAAA,CAAXvB,MAAAA,IAAkCgB,KAAK,KAAKO,KAAK,CAALA,MAAAA,CAAhD,KAAA,EAAoE;UAClE,OAAA,IAAA;QACD;;QAED,OAAO;UACLL,MADK,EACLA,MADK;UAEL6B,aAAa,EAAEpD,gBAAgB,CAC7B2B,KAAK,CADwB,MAAA,EAE7BA,KAAK,CAFwB,MAAA,EAG7BA,KAAK,CAHwB,mBAAA,EAI7BC,KAAK,CAJwB,WAAA,EAAA,MAAA,EAM7BA,KAAK,CANwB,aAAA;QAF1B,CAAP;MALF,CAAA;IAzBwB,CAAA,CAAA;;IAAA,eAAA,gCAAA,oBAAA,EA4CG,iBAMvB;MAAA,IANwB,KAMxB,SANwB,KAMxB;MAAA,IAJJvB,MAII,SAJJA,MAII;;MACJ,MAAA,QAAA,CAAc,iBAAuB;QAAA,IAApB+C,aAAoB,SAApBA,aAAoB;QACnC,IAAMI,cAAc,GAAGJ,aAAa,CAACX,KAAK,CAA1C,GAAoC,CAApC;;QAEA,IAAIe,cAAc,KAAlB,MAAA,EAA+B;UAC7B,OAAA,IAAA;QACD;;QAED,OAAO;UACLJ,aAAa,kCAAE,aAAF,4BAEVX,KAAK,CAAN,GAFW,EAEEpC,MAFF;QADR,CAAP;MAPF,CAAA;IAnDwB,CAAA,CAAA;;IAAA,eAAA,gCAAA,iBAAA,EAmEA,YAAM;MAC9B,IAAQuB,KAAR,GAAkB,MAAlB,KAAA,CAAQA,KAAR;MAEA,OAAOA,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAzB,KAAOA,CAAP;IAtEwB,CAAA,CAAA;;IAAA,eAAA,gCAAA,kBAAA,EAyEC,iBAAyC;MAAA,IAAtCa,KAAsC,SAAtCA,KAAsC;MAClE,IAAQgB,gBAAR,GAA6B,MAA7B,KAAA,CAAQA,gBAAR;MACA,IAAQvB,MAAR,GAAmB,MAAnB,KAAA,CAAQA,MAAR;MAEA,IAAMC,aAAa,GAAGsB,gBAAgB,CAAC;QAAEhB,KAAAA,EAAAA;MAAF,CAAD,CAAtC;;MAEA,IAAA,aAAA,EAAmB;QACjB,IAAMiB,aAAa,GAAGxB,MAAM,CAANA,IAAAA,CACnBY,UAAAA,KAAD;UAAA,OAAWA,KAAK,CAALA,KAAAA,CAAAA,GAAAA,KAAoBX,aAAa,CAD9C,GACE;QAAA,CADoBD,CAAtB;QAIA,OAAA,aAAA;MACD;;MAED,OAAA,SAAA;IAvFwB,CAAA,CAAA;;IAGxB,sBAAkCoB,UAAU,CAAVA,GAAAA,CAAlC,QAAkCA,CAAlC;IAAA,4CAAQjD,MAAR;IAAA,IAAQA,OAAR,sCAAM,CAAN;IAAA,4CAAoBgB,KAApB;IAAA,IAAoBA,MAApB,sCAA4B,CAA5B;;IAEA,MAAA,KAAA,GAAa;MACXY,MAAM,EADK,EAAA;MAEXC,MAAM,EAFK,EAAA;MAGXL,QAAQ,EAHG,EAAA;MAIXN,MAAM,EAAE;QAAElB,MAAM,EAAR,OAAA;QAAUgB,KAAK,EAALA;MAAV,CAJG;MAKXpB,WAAW,EAAE,MAAA,KAAA,CALF,WAAA;MAWXmD,aAAa,EAAE;IAXJ,CAAb;IALwB;EAkBzB;;;;WAwEDO,kBAAS;MAAA;;MACP,kBAyBI,KAzBJ,KAAA;MAAA,IAAM,IAAN,eAAM,IAAN;MAAA,IAAM,MAAN,eAAM,MAAN;MAAA,IAAM,WAAN,eAAM,WAAN;MAAA,IAAM,KAAN,eAAM,KAAN;MAAA,IAAM,MAAN,eAAM,MAAN;MAAA,IAAM,gBAAN,eAAM,gBAAN;MAAA,IAAM,WAAN,eAAM,WAAN;MAAA,IAAM,YAAN,eAAM,YAAN;MAAA,IAAM,kBAAN,eAAM,kBAAN;MAAA,IAAM,YAAN,eAAM,YAAN;MAAA,IAAM,WAAN,eAAM,WAAN;MAAA,IAAM,UAAN,eAAM,UAAN;MAAA,IAAM,mBAAN,eAAM,mBAAN;MAAA,IAAM,iBAAN,eAAM,iBAAN;MAAA,IAAM,eAAN,eAAM,eAAN;MAAA,IAAM,iBAAN,eAAM,iBAAN;MAAA,IAAM,mBAAN,eAAM,mBAAN;MAAA,IAAM,kBAAN,eAAM,kBAAN;MAAA,IAAM,cAAN,eAAM,cAAN;MAAA,IAAM,YAAN,eAAM,YAAN;MAAA,IAAM,eAAN,eAAM,eAAN;MAAA,wCAwBEC,qBAxBF;MAAA,IAwBEA,qBAxBF,sCAwB0BC,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,IAAyBC,sBAxBnD;MA2BA,kBAAoD,KAApD,KAAA;MAAA,IAAM,MAAN,eAAM,MAAN;MAAA,IAAM,MAAN,eAAM,MAAN;MAAA,IAAM,QAAN,eAAM,QAAN;MAAA,IAAkCV,aAAlC,eAAkCA,aAAlC;MAEA,IAAMW,YAAY,GAAGnC,KAAK,CAALA,MAAAA,CAAaA,KAAK,CAAvC,KAAqBA,CAArB;MACA,IAAMoC,iBAAiB,GAAG/D,WAAW,CAAC8D,YAAY,CAAlD,GAAqC,CAArC;MACA,IAAME,cAAc,GAAGD,iBAAiB,GAAGA,iBAAiB,CAApB,OAAA,GAAxC,EAAA;MACA,IAAME,mBAAmB,GAAGd,aAAa,CAACW,YAAY,CAAtD,GAAyC,CAAzC;MAEA,IAAII,uBAAuB,GACzBpD,IAAI,KAAJA,OAAAA,GAAAA,eAAAA,GADF,iBAAA;;MAGA,IAAIqD,UAAU,KAAd,QAAA,EAA6B;QAC3BD,uBAAuB,mCAAG,uBAAH;UAErBE,uBAAuB,EAAEC;QAFJ,EAAvBH;MAID;;MAED,YAKIF,cAAc,CAAdA,cAAAA,IALJ,EAAA;MAAA,sBACEvD,GADF;MAAA,IACEA,GADF,0BACQ6D,MAAM,CADR,GAAN;MAAA,wBAEEC,KAFF;MAAA,IAEEA,KAFF,4BAEUD,MAAM,CAFV,KAAN;MAAA,yBAGEE,MAHF;MAAA,IAGEA,MAHF,6BAGWF,MAAM,CAHX,MAAN;MAAA,uBAIEG,IAJF;MAAA,IAIEA,IAJF,2BAISH,MAAM,CAACG,IAJhB;;MAOA,IAAIC,kBAAkB,GAAtB,CAAA;;MAEA,KAAK,IAAIC,CAAC,GAAG1C,MAAM,CAANA,MAAAA,GAAb,CAAA,EAAgC0C,CAAC,IAAjC,CAAA,EAAwCA,CAAxC,EAAA,EAA6C;QAC3C,4BAKI1C,MAAM,CAANA,CAAM,CAANA,CAAAA,UAAAA,CALJ,OAAA,CAEE2C,oBAFF;QAAA,IAEEA,oBAFF,sCAEyB9D,IAAI,KAAJA,OAAAA,GACnB6D,CAAC,KAAK1C,MAAM,CAANA,MAAAA,GADanB,CAAAA,GAEnB,IAJN;;QAOA,IAAI8D,oBAAoB,KAAxB,KAAA,EAAoC;UAClCF,kBAAkB;QADpB,CAAA,MAEO;UACL;QACD;MACF;;MAED,IAAMG,qBAAqB,GACzB,UAAU,KAAV,OAAA,GACI,KAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAwB,CAAxB,CAAA,EAAA,IAAA,CAAkChC,UAAAA,KAAD,EAAW;QAC1C,IAAQhB,UAAR,GAAA,KAAA,CAAQA,UAAR;QACA,IAAM/B,OAAO,GAAG+B,UAAU,GAAGA,UAAU,CAAb,OAAA,GAA1B,EAAA;QACA,IAAM,iBAAN,GAAA,OAAA,CAAM,iBAAN;QAAA,2BAAA,OAAA,CAA2BiD,WAA3B;QAAA,IAA2BA,WAA3B,qCAAyC,IAAzC;;QAEA,IAAIC,iBAAiB,IAAID,WAAW,KAApC,KAAA,EAAgD;UAC9C,OAAA,IAAA;QACD;;QAED,OAAA,KAAA;MAVN,CACI,CADJ,GADF,KAAA;MAeA,IAAME,cAAc,GAClB,UAAU,KAAV,OAAA,GACE,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA;QAAgB,GAAG,EAAC;MAApB,CAAA,EACGC,YAAY,CAAC;QACZnE,IAAI,EADQ,OAAA;QAEZQ,MAFY,EAEZA,MAFY;QAGZgD,MAAM,EAAE;UAAE7D,GAAF,EAAEA,GAAF;UAAO8D,KAAP,EAAOA,KAAP;UAAcC,MAAd,EAAcA,MAAd;UAAsBC,IAAAA,EAAAA;QAAtB,CAHI;QAIZxC,MAJY,EAIZA,MAJY;QAKZiD,gBAAgB,EAAE,KALN,gBAAA;QAMZC,eAAe,EAAE,KANL,eAAA;QAOZC,qBAAqB,EAAE,KAPX,kBAAA;QAQZvE,gBAAgB,EACdmD,cAAc,CAAdA,gBAAAA,KAAAA,SAAAA,GACIA,cAAc,CADlBA,gBAAAA,GAEIE,uBAAuB,CAXjB,gBAAA;QAYZmB,iBAAiB,EACfrB,cAAc,CAAdA,uBAAAA,KAAAA,SAAAA,GACIA,cAAc,CADlBA,uBAAAA,GAEIE,uBAAuB,CAfjB,uBAAA;QAgBZhE,KAAK,EAAE,CACLoF,MAAM,CADD,QAAA,EAELT,qBAAqB,IAAI,CAEvB;UAAEzE,MAAM,EAAE6D;QAAV,CAFuB,EAGvBqB,MAAM,CALH,QAEoB,CAFpB;MAhBK,CAAD,CADf,CADF,GADF,IAAA;MA+BA,OACE,KAAA,CAAA,aAAA,CAAC,KAAD,CAAA,QAAA,EAAA,IAAA,EACGT,qBAAqB,GAAA,IAAA,GADxB,cAAA,EAEE,KAAA,CAAA,aAAA,CAAA,oBAAA,EAAA;QACE,OAAO,EADT,qBAAA;QAEE,KAAK,EAAES,MAAM,CAFf,SAAA;QAGE,QAAQ,EAAE,KAAKC;MAHjB,CAAA,EAKG,MAAM,CAAN,GAAA,CAAW,UAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAwB;QAClC,IAAMC,OAAO,GAAG1B,YAAY,CAAZA,GAAAA,KAAqBtB,KAAK,CAA1C,GAAA;QACA,IAAMiD,OAAO,GAAG7D,QAAQ,CAACY,KAAK,CAA9B,GAAwB,CAAxB;QACA,IAAMK,KAAK,GAAGZ,MAAM,CAHc,KAGd,CAApB;QAMA,IAAIyD,cAA0D,GAA9D,CAAA;;QAEA,IAAI7B,sBAAsB,IAAID,QAAQ,CAARA,EAAAA,KAA9B,KAAA,EAAqD;UACnD,IAAIxB,KAAK,GAAGD,IAAI,CAAJA,MAAAA,GAAAA,kBAAAA,GAAZ,CAAA,EAAkD;YAEhDuD,cAAc,GAAdA,cAAAA;UAFF,CAAA,MAGO;YACL,IAAMC,gBAAgB,GAAG1D,MAAM,CAACE,IAAI,CAAJA,MAAAA,GAAhC,CAA+B,CAA/B;YACA,IAAMyD,WAAW,GACf,KAAK,KAAKzD,IAAI,CAAJA,MAAAA,GAAV,CAAA,GAAA,YAAA,GAEI,KAAK,IAAIA,IAAI,CAAJA,MAAAA,GAAT,kBAAA,GAAA,gCAAA,GALD,cAEL;YAMAuD,cAAc,GAAGC,gBAAgB,GAC7B,gBAAgB,CAAhB,QAAA,CAAA,OAAA,CAAA,WAAA,CAA8C;cAC5CpE,UAAU,EAAE,CAAA,CAAA,EAAI,IAAJ,OAAA,EADgC,CAChC,CADgC;cAE5CC,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA,EAF+B,WAE/B,CAF+B;cAG5CqE,WAAW,EAAE;YAH+B,CAA9C,CAD6B,GAAjCH,gCAAAA;UAOD;QAnBH,CAAA,MAoBO;UACLA,cAAc,GAAG,KAAK,CAAL,QAAA,CAAA,IAAA,GACb,KAAK,CAAL,QAAA,CAAA,IAAA,CAAA,WAAA,CAAgC;YAC9BnE,UAAU,EAAE,CAAA,CAAA,EAAI,IAAJ,OAAA,EADkB,CAClB,CADkB;YAE9BC,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA,EAFiB,CAEjB,CAFiB;YAG9BqE,WAAW,EAAE;UAHiB,CAAhC,CADa,GAAjBH,CAAAA;QAOD;;QAED,YAiBI7C,KAAK,CAALA,UAAAA,GACAA,KAAK,CAALA,UAAAA,CADAA,OAAAA,GAjBJ,EAAA;QAAA,IAAM,cAAN,SAAM,cAAN;QAAA,8BAEEiC,WAFF;QAAA,IAEEA,WAFF,kCAAM,IAAN;QAAA,IAAM,iBAAN,SAAM,iBAAN;QAAA,IAAM,iBAAN,SAAM,iBAAN;QAAA,IAAM,kBAAN,SAAM,kBAAN;QAAA,IAAM,WAAN,SAAM,WAAN;QAAA,IAAM,SAAN,SAAM,SAAN;QAAA,IAAM,gBAAN,SAAM,gBAAN;QAAA,IAAM,uBAAN,SAAM,uBAAN;QAAA,IAAM,qBAAN,SAAM,qBAAN;QAAA,kCAWEjE,gBAXF;QAAA,IAWEA,gBAXF,sCAWqBqD,uBAAuB,CAXtC,gBAAN;QAAA,iCAYE4B,cAZF;QAAA,IAYEA,cAZF,qCAYmB5B,uBAAuB,CAZpC,cAAN;QAAA,kCAaE6B,qBAbF;QAAA,IAaEA,qBAbF,sCAa0BjE,gBAAgB,KAAhBA,KAAAA,GAAAA,kBAAAA,GAEpBoC,uBAAuB,CAfvB,qBAAN;QAAA,kCAgBEE,uBAhBF;QAAA,IAgBEA,uBAhBF,sCAgB4BF,uBAAuB,CAACE,uBAhBpD;;QAqBA,IAAI4B,gBAAgB,GAAG;UACrBnF,gBADqB,EACrBA,gBADqB;UAErBiF,cAFqB,EAErBA,cAFqB;UAGrBC,qBAHqB,EAGrBA,qBAHqB;UAIrB3B,uBAAAA,EAAAA;QAJqB,CAAvB;;QAaA,IAAIhC,KAAK,KAAKD,IAAI,CAAJA,MAAAA,GAAd,CAAA,EAA+B;UAC7B,IAAM8D,SAAS,GAAGhE,MAAM,CAACG,KAAK,GAA9B,CAAwB,CAAxB;;UAEA,IAAA,SAAA,EAAe;YACb,YAQI6D,SAAS,CAATA,UAAAA,GACAA,SAAS,CAATA,UAAAA,CADAA,OAAAA,GARJ,EAAA;YAAA,IAAM,iBAAN,SAAM,gBAAN;YAAA,kCAEEpF,gBAFF;YAAA,IAEEA,iBAFF,sCAEqBqD,uBAAuB,CAFtC,gBAAN;YAAA,iCAGE4B,cAHF;YAAA,IAGEA,eAHF,qCAGmB5B,uBAAuB,CAHpC,cAAN;YAAA,kCAIE6B,qBAJF;YAAA,IAIEA,sBAJF,sCAI0BjE,iBAAgB,KAAhBA,KAAAA,GAAAA,kBAAAA,GAEpBoC,uBAAuB,CANvB,qBAAN;YAAA,kCAOEE,uBAPF;YAAA,IAOEA,wBAPF,sCAO4BF,uBAAuB,CAACE,uBAPpD;;YAYA4B,gBAAgB,GAAG;cACjBnF,gBADiB,EACjBA,iBADiB;cAEjBiF,cAFiB,EAEjBA,eAFiB;cAGjBC,qBAHiB,EAGjBA,sBAHiB;cAIjB3B,uBAAAA,EAAAA;YAJiB,CAAnB4B;UAMD;QACF;;QAED,YAKI1F,cAAc,IALlB,EAAA;QAAA,sBACEG,GADF;QAAA,IACOyF,gBADP,0BAC0B5B,MAAM,CAD1B,GAAN;QAAA,wBAEEC,KAFF;QAAA,IAES4B,kBAFT,4BAE8B7B,MAAM,CAF9B,KAAN;QAAA,yBAGEE,MAHF;QAAA,IAGU4B,mBAHV,6BAGgC9B,MAAM,CAHhC,MAAN;QAAA,uBAIEG,IAJF;QAAA,IAIQ4B,iBAJR,2BAI4B/B,MAAM,CAACG,IAJnC;;QAOA,IAAM6B,YAAY,GAChBnC,UAAU,KAAVA,MAAAA,IAAyBW,WAAW,KAApCX,KAAAA,GACIhB,aAAa,CAACX,KAAK,CADvB2B,GACiB,CADjBA,GADF,CAAA;QAKA,OACE,KAAA,CAAA,aAAA,CAAA,WAAA,EAAA;UACE,GAAG,EAAE3B,KAAK,CADZ,GAAA;UAEE,KAAK,EAAErC,UAAU,CAFnB,YAAA;UAGE,OAAO,EAHT,qBAAA;UAIE,MAAM,EAJR,cAAA;UAKE,aAAa,EAAC;QALhB,CAAA,EAOE,KAAA,CAAA,aAAA,CAAA,aAAA,EAAA,QAAA,CAAA;UACE,KAAK,EADP,KAAA;UAEE,MAAM,EAAEiC,KAAK,KAAKD,IAAI,CAAJA,MAAAA,GAFpB,CAAA;UAGE,OAAO,EAHT,OAAA;UAIE,OAAO,EAAEoE,gBAAgB,CAAhBA,QAAAA,CAA0B/D,KAAK,CAJ1C,GAIW+D,CAJX;UAKE,MAAM,EALR,MAAA;UAME,OAAO,EANT,OAAA;UAOE,KAAK,EAPP,KAAA;UAQE,gBAAgB,EARlB,gBAAA;UASE,kBAAkB,EATpB,kBAAA;UAUE,mBAAmB,EAVrB,mBAAA;UAWE,iBAAiB,EAXnB,iBAAA;UAYE,WAAW,EAZb,WAAA;UAaE,kBAAkB,EAbpB,kBAAA;UAcE,iBAAiB,EAdnB,iBAAA;UAeE,SAAS,EAfX,SAAA;UAgBE,iBAAiB,EAhBnB,iBAAA;UAiBE,mBAAmB,EAjBrB,mBAAA;UAkBE,kBAAkB,EAlBpB,kBAAA;UAmBE,cAAc,EAnBhB,cAAA;UAoBE,eAAe,EApBjB,eAAA;UAqBE,YAAY,EArBd,YAAA;UAsBE,uBAAuB,EAtBzB,uBAAA;UAuBE,YAAY,EAvBd,YAAA;UAwBE,mBAAmB,EAxBrB,mBAAA;UAyBE,oBAAoB,EAAE,MAAA,CAzBxB,kBAAA;UA0BE,gBAAgB,EAAE,MAAA,CA1BpB,gBAAA;UA2BE,eAAe,EAAE,MAAA,CA3BnB,eAAA;UA4BE,IAAI,EA5BN,IAAA;UA6BE,UAAU,EA7BZ,UAAA;UA8BE,WAAW,EA9Bb,WAAA;UA+BE,iBAAiB,EACf1B,qBAAqB,IAAI,CAhC7B,iBAAA;UAkCE,YAAY,EAlCd,YAAA;UAmCE,WAAW,EAnCb,WAAA;UAoCE,WAAW,EApCb,WAAA;UAqCE,YAAY,EArCd,YAAA;UAsCE,iBAAiB,EAtCnB,iBAAA;UAuCE,eAAe,EAvCjB,eAAA;UAwCE,cAAc,EAAEzC,KAAK,KAALA,CAAAA,IAAeoE,kBAAkB,CAAC;YAAEhE,KAAAA,EAAAA;UAAF,CAAD,CAxCnD;UAyCE,qBAAqB,EAAEiE;QAzCzB,CAAA,EARJ,gBAQI,CAAA,CAPF,CADF;MAvHN,CAOK,CALH,CAFF,EA+KG5B,qBAAqB,GAAA,cAAA,GAhL1B,IACE,CADF;IAmLD;;;WAnfD,kCAAA,KAAA,EAAA,KAAA,EAA4D;MAC1D,IACEnD,KAAK,CAALA,MAAAA,KAAiBC,KAAK,CAAtBD,MAAAA,IACAA,KAAK,CAALA,WAAAA,KAAsBC,KAAK,CAF7B,WAAA,EAGE;QACA,OAAA,IAAA;MACD;;MAED,IAAMC,QAAQ,GAAG,KAAK,CAAL,MAAA,CAAA,MAAA,CAAmC,UAAA,GAAA,EAAA,IAAA,EAAe;QACjE,IAAMC,UAAU,GAAGH,KAAK,CAALA,WAAAA,CAAkBzB,IAAI,CAAzC,GAAmByB,CAAnB;;QACA,aAA6B,CAAA,UAAU,KAAV,IAAA,IAAA,UAAU,KAAA,KAAV,CAAA,GAAA,KAAA,CAAA,GAAA,UAAU,CAAV,OAAA,KAA7B,EAAA;QAAA,IAAQI,gBAAR,UAAQA,gBAAR;;QAEApB,GAAG,CAACT,IAAI,CAARS,GAAG,CAAHA,GACEiB,KAAK,CAALA,QAAAA,CAAe1B,IAAI,CAAnB0B,GAAAA,KACA,IAAII,QAAQ,CAAZ,KAAA,CACEL,KAAK,CAALA,gBAAAA,CAAAA,QAAAA,CAAgCzB,IAAI,CAApCyB,GAAAA,KACAI,gBAAgB,KADhBJ,KAAAA,GAEId,sBAAsB,CAACc,KAAK,CAAN,IAAA,EAAaC,KAAK,CAAlB,MAAA,EAF1BD,UAE0B,CAF1BA,GAHJhB,CAEE,CAFFA;QASA,OAAA,GAAA;MAbe,CAAA,EAAjB,EAAiB,CAAjB;MAgBA,OAAO;QACLsB,MAAM,EAAEN,KAAK,CADR,MAAA;QAELO,MAAM,EAAE,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,UAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAwB;UAC/C,IAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,GAAhC,CAA0B,CAA1B;UACA,IAAMC,SAAS,GAAGF,IAAI,CAACC,KAAK,GAA5B,CAAsB,CAAtB;UAEA,IAAME,QAAQ,GAAGX,KAAK,CAALA,MAAAA,CAAjB,KAAiBA,CAAjB;UAEA,IAAMY,cAAc,GAAGX,QAAQ,CAACY,KAAK,CAArC,GAA+B,CAA/B;UACA,IAAMC,eAAe,GAAGP,aAAa,GACjCN,QAAQ,CAACM,aAAa,CADW,GACzB,CADyB,GAArC,SAAA;UAGA,IAAMQ,WAAW,GAAGL,SAAS,GAAGT,QAAQ,CAACS,SAAS,CAArB,GAAW,CAAX,GAA7B,SAAA;UAEA,IAAMR,UAAU,GACdH,KAAK,CAALA,WAAAA,CAAkBc,KAAK,CAAvBd,GAAAA,KACAC,KAAK,CAALA,WAAAA,CAAkBa,KAAK,CADvBd,GACAC,CADAD,KAECY,QAAQ,GAAGA,QAAQ,CAAX,UAAA,GAHX,mBACEZ,CADF;UAKA,IAAMiB,cAAc,GAClBjB,KAAK,CAALA,WAAAA,CAAkBW,SAAlBX,KAAAA,IAAkBW,IAAAA,SAAlBX,KAAAA,KAAAA,CAAkBW,GAAlBX,KAAAA,CAAkBW,GAAAA,SAAS,CAA3BX,GAAAA,KACAC,KAAK,CAALA,WAAAA,CAAkBU,SAAlBV,KAAAA,IAAkBU,IAAAA,SAAlBV,KAAAA,KAAAA,CAAkBU,GAAlBV,KAAAA,CAAkBU,GAAAA,SAAS,CAF7B,GAEEV,CAFF;UAIA,IAAMiB,kBAAkB,GACtBlB,KAAK,CAALA,WAAAA,CAAkBQ,aAAlBR,KAAAA,IAAkBQ,IAAAA,aAAlBR,KAAAA,KAAAA,CAAkBQ,GAAlBR,KAAAA,CAAkBQ,GAAAA,aAAa,CAA/BR,GAAAA,KACAC,KAAK,CAALA,WAAAA,CAAkBO,aAAlBP,KAAAA,IAAkBO,IAAAA,aAAlBP,KAAAA,KAAAA,CAAkBO,GAAlBP,KAAAA,CAAkBO,GAAAA,aAAa,CAFjC,GAEEP,CAFF;UAIA,IAAMkB,KAAK,GAAG;YACZL,KADY,EACZA,KADY;YAEZX,UAFY,EAEZA,UAFY;YAGZiB,QAAQ,EAAE;cACRC,OAAO,EAAE7B,sBAAsB,CAC7BQ,KAAK,CADwB,IAAA,EAAA,cAAA,EAG7BC,KAAK,CAHwB,MAAA,EADvB,UACuB,CADvB;cAORqB,IAAI,EAAEN,WAAW,GACbxB,sBAAsB,CACpBQ,KAAK,CADe,IAAA,EAAA,WAAA,EAGpBC,KAAK,CAHe,MAAA,EADT,cACS,CADT,GAPT,SAAA;cAeRtB,QAAQ,EAAEoC,eAAe,GACrBvB,sBAAsB,CACpBQ,KAAK,CADe,IAAA,EAAA,eAAA,EAGpBC,KAAK,CAHe,MAAA,EADD,kBACC,CADD,GAOrBsB;YAtBI,CAHE;YA2BZC,MAAM,EAAE,CAAA,KAAA,EAENvB,KAAK,CAFC,MAAA,EAAA,UAAA,EAAA,cAAA,EAAA,kBAAA,EAAA,cAAA,EAAA,WAAA,EAAA,eAAA;UA3BI,CAAd;;UAuCA,IACEW,QAAQ,IACR,KAAK,CAAL,MAAA,CAAA,KAAA,CAAmB,UAAA,EAAA,EAAA,CAAA,EAAW;YAE5B,OAAOA,QAAQ,CAARA,MAAAA,CAAAA,CAAAA,MAAP,EAAA;UAJJ,CAEE,CAFF,EAME;YACA,OAAA,QAAA;UACD;;UAED,OAAA,KAAA;QA5EG,CAEG,CAFH;QA8ELV,QA9EK,EA8ELA,QA9EK;QA+EL5B,WAAW,EAAE0B,KAAK,CA/Eb,WAAA;QAgFLyB,aAAa,EAAEpD,gBAAgB,CAC7B2B,KAAK,CADwB,MAAA,EAE7BA,KAAK,CAFwB,MAAA,EAG7BA,KAAK,CAHwB,mBAAA,EAI7BC,KAAK,CAJwB,WAAA,EAK7BA,KAAK,CALwB,MAAA,EAM7BA,KAAK,CANwB,aAAA;MAhF1B,CAAP;IAyFD;;;;EAlHoCF,KAAK,CAA7B,S;;SAAA,S;AAuff,IAAM6D,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BoB,SAAS,EAAE;IACTC,IAAI,EAAE;EADG,CADoB;EAI/BC,QAAQ,EAAE;IACRC,QAAQ,EADA,UAAA;IAERpG,GAAG,EAFK,CAAA;IAGRgE,IAAI,EAHI,CAAA;IAIRF,KAAK,EAAE;EAJC,CAJqB;EAU/BuC,QAAQ,EAAE;IACRC,MAAM,EAAE;EADA;AAVqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  LayoutChangeEvent,\n  Dimensions,\n  Platform,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\nimport type { NavigationState as StackNavigationState } from 'react-navigation';\n\nimport {\n  MaybeScreenContainer,\n  MaybeScreen,\n  shouldUseActivityState,\n} from '../Screens';\nimport { getDefaultHeaderHeight } from '../Header/HeaderSegment';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport CardContainer from './CardContainer';\nimport {\n  DefaultTransition,\n  ModalTransition,\n} from '../../TransitionConfigs/TransitionPresets';\nimport { forNoAnimation as forNoAnimationHeader } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport { forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport type {\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  Route,\n  Scene,\n  StackDescriptorMap,\n  StackNavigationOptions,\n  StackDescriptor,\n} from '../../types';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  mode: StackCardMode;\n  insets: EdgeInsets;\n  state: StackNavigationState;\n  descriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  getGesturesEnabled: (props: { route: Route<string> }) => boolean;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  headerMode: StackHeaderMode;\n  isParentHeaderShown: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene<Route<string>>[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst EPSILON = 0.01;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getHeaderHeights = (\n  routes: Route<string>[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  descriptors: StackDescriptorMap,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return routes.reduce<Record<string, number>>((acc, curr) => {\n    const { options = {} } = descriptors[curr.key] || {};\n    const style: any = StyleSheet.flatten(options.headerStyle || {});\n\n    const height =\n      typeof style.height === 'number' ? style.height : previous[curr.key];\n\n    const safeAreaInsets = {\n      ...insets,\n      ...options.safeAreaInsets,\n    };\n\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : safeAreaInsets.top,\n    } = options;\n\n    acc[curr.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  mode: StackCardMode,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const {\n    gestureDirection = mode === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection,\n  } = descriptor?.options || {};\n\n  return getDistanceForDirection(layout, gestureDirection);\n};\n\nconst getProgressFromGesture = (\n  mode: StackCardMode,\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor?: StackDescriptor\n) => {\n  const distance = getDistanceFromOptions(\n    mode,\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport default class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(props: Props, state: State) {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = props.routes.reduce<GestureValues>((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const { animationEnabled } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          props.openingRouteKeys.includes(curr.key) &&\n          animationEnabled !== false\n            ? getDistanceFromOptions(props.mode, state.layout, descriptor)\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    return {\n      routes: props.routes,\n      scenes: props.routes.map((route, index, self) => {\n        const previousRoute = self[index - 1];\n        const nextRoute = self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          props.descriptors[route.key] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          props.descriptors[nextRoute?.key] ||\n          state.descriptors[nextRoute?.key];\n\n        const previousDescriptor =\n          props.descriptors[previousRoute?.key] ||\n          state.descriptors[previousRoute?.key];\n\n        const scene = {\n          route,\n          descriptor,\n          progress: {\n            current: getProgressFromGesture(\n              props.mode,\n              currentGesture,\n              state.layout,\n              descriptor\n            ),\n            next: nextGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  nextGesture,\n                  state.layout,\n                  nextDescriptor\n                )\n              : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  props.mode,\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor\n                )\n              : undefined,\n          },\n          __memo: [\n            route,\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }),\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        props.routes,\n        props.insets,\n        props.isParentHeaderShown,\n        state.descriptors,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: { height, width },\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          props.routes,\n          props.insets,\n          props.isParentHeaderShown,\n          state.descriptors,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      mode,\n      insets,\n      descriptors,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      getGesturesEnabled,\n      renderHeader,\n      renderScene,\n      headerMode,\n      isParentHeaderShown,\n      onTransitionStart,\n      onTransitionEnd,\n      onPageChangeStart,\n      onPageChangeConfirm,\n      onPageChangeCancel,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      // Enable on new versions of `react-native-screens`\n      // On older versions of `react-native-screens`, there's an issue with screens not being responsive to user interaction.\n      detachInactiveScreens = Platform.OS === 'web' || shouldUseActivityState,\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedDescriptor = descriptors[focusedRoute.key];\n    const focusedOptions = focusedDescriptor ? focusedDescriptor.options : {};\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    let defaultTransitionPreset =\n      mode === 'modal' ? ModalTransition : DefaultTransition;\n\n    if (headerMode === 'screen') {\n      defaultTransitionPreset = {\n        ...defaultTransitionPreset,\n        headerStyleInterpolator: forNoAnimationHeader,\n      };\n    }\n\n    const {\n      top = insets.top,\n      right = insets.right,\n      bottom = insets.bottom,\n      left = insets.left,\n    } = focusedOptions.safeAreaInsets || {};\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = mode === 'modal'\n          ? i !== scenes.length - 1\n          : true,\n      } = scenes[i].descriptor.options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        break;\n      }\n    }\n\n    const isFloatHeaderAbsolute =\n      headerMode === 'float'\n        ? this.state.scenes.slice(-2).some((scene) => {\n            const { descriptor } = scene;\n            const options = descriptor ? descriptor.options : {};\n            const { headerTransparent, headerShown = true } = options;\n\n            if (headerTransparent || headerShown === false) {\n              return true;\n            }\n\n            return false;\n          })\n        : false;\n\n    const floatingHeader =\n      headerMode === 'float' ? (\n        <React.Fragment key=\"header\">\n          {renderHeader({\n            mode: 'float',\n            layout,\n            insets: { top, right, bottom, left },\n            scenes,\n            getPreviousScene: this.getPreviousScene,\n            getFocusedRoute: this.getFocusedRoute,\n            onContentHeightChange: this.handleHeaderLayout,\n            gestureDirection:\n              focusedOptions.gestureDirection !== undefined\n                ? focusedOptions.gestureDirection\n                : defaultTransitionPreset.gestureDirection,\n            styleInterpolator:\n              focusedOptions.headerStyleInterpolator !== undefined\n                ? focusedOptions.headerStyleInterpolator\n                : defaultTransitionPreset.headerStyleInterpolator,\n            style: [\n              styles.floating,\n              isFloatHeaderAbsolute && [\n                // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n                { height: focusedHeaderHeight },\n                styles.absolute,\n              ],\n            ],\n          })}\n        </React.Fragment>\n      ) : null;\n\n    return (\n      <React.Fragment>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {routes.map((route, index, self) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive: Animated.AnimatedInterpolation | 2 | 1 | 0 = 1;\n\n            if (shouldUseActivityState || Platform.OS === 'web') {\n              if (index < self.length - activeScreensLimit - 1) {\n                // screen should be inactive because it is too deep in the stack\n                isScreenActive = STATE_INACTIVE;\n              } else {\n                const sceneForActivity = scenes[self.length - 1];\n                const outputValue =\n                  index === self.length - 1\n                    ? STATE_ON_TOP // the screen is on top after the transition\n                    : index >= self.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n                isScreenActive = sceneForActivity\n                  ? sceneForActivity.progress.current.interpolate({\n                      inputRange: [0, 1 - EPSILON, 1],\n                      outputRange: [1, 1, outputValue],\n                      extrapolate: 'clamp',\n                    })\n                  : STATE_TRANSITIONING_OR_BELOW_TOP;\n              }\n            } else {\n              isScreenActive = scene.progress.next\n                ? scene.progress.next.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, 0],\n                    extrapolate: 'clamp',\n                  })\n                : 1;\n            }\n\n            const {\n              safeAreaInsets,\n              headerShown = true,\n              headerTransparent,\n              cardShadowEnabled,\n              cardOverlayEnabled,\n              cardOverlay,\n              cardStyle,\n              animationEnabled,\n              gestureResponseDistance,\n              gestureVelocityImpact,\n              gestureDirection = defaultTransitionPreset.gestureDirection,\n              transitionSpec = defaultTransitionPreset.transitionSpec,\n              cardStyleInterpolator = animationEnabled === false\n                ? forNoAnimationCard\n                : defaultTransitionPreset.cardStyleInterpolator,\n              headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n            } = scene.descriptor\n              ? scene.descriptor.options\n              : ({} as StackNavigationOptions);\n\n            let transitionConfig = {\n              gestureDirection,\n              transitionSpec,\n              cardStyleInterpolator,\n              headerStyleInterpolator,\n            };\n\n            // When a screen is not the last, it should use next screen's transition config\n            // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n            // For example combining a slide and a modal transition would look wrong otherwise\n            // With this approach, combining different transition styles in the same navigator mostly looks right\n            // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n            // but majority of the transitions look alright\n            if (index !== self.length - 1) {\n              const nextScene = scenes[index + 1];\n\n              if (nextScene) {\n                const {\n                  animationEnabled,\n                  gestureDirection = defaultTransitionPreset.gestureDirection,\n                  transitionSpec = defaultTransitionPreset.transitionSpec,\n                  cardStyleInterpolator = animationEnabled === false\n                    ? forNoAnimationCard\n                    : defaultTransitionPreset.cardStyleInterpolator,\n                  headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n                } = nextScene.descriptor\n                  ? nextScene.descriptor.options\n                  : ({} as StackNavigationOptions);\n\n                transitionConfig = {\n                  gestureDirection,\n                  transitionSpec,\n                  cardStyleInterpolator,\n                  headerStyleInterpolator,\n                };\n              }\n            }\n\n            const {\n              top: safeAreaInsetTop = insets.top,\n              right: safeAreaInsetRight = insets.right,\n              bottom: safeAreaInsetBottom = insets.bottom,\n              left: safeAreaInsetLeft = insets.left,\n            } = safeAreaInsets || {};\n\n            const headerHeight =\n              headerMode !== 'none' && headerShown !== false\n                ? headerHeights[route.key]\n                : 0;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={StyleSheet.absoluteFill}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  active={index === self.length - 1}\n                  focused={focused}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  cardOverlay={cardOverlay}\n                  cardOverlayEnabled={cardOverlayEnabled}\n                  cardShadowEnabled={cardShadowEnabled}\n                  cardStyle={cardStyle}\n                  onPageChangeStart={onPageChangeStart}\n                  onPageChangeConfirm={onPageChangeConfirm}\n                  onPageChangeCancel={onPageChangeCancel}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  gestureResponseDistance={gestureResponseDistance}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  mode={mode}\n                  headerMode={headerMode}\n                  headerShown={headerShown}\n                  hasAbsoluteHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  renderScene={renderScene}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  gestureEnabled={index !== 0 && getGesturesEnabled({ route })}\n                  gestureVelocityImpact={gestureVelocityImpact}\n                  {...transitionConfig}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </React.Fragment>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport invariant from \"./utils/invariant\";\nvar StateUtils = {\n  get: function get(state, key) {\n    return state.routes.find(function (route) {\n      return route.key === key;\n    }) || null;\n  },\n  indexOf: function indexOf(state, key) {\n    return state.routes.findIndex(function (route) {\n      return route.key === key;\n    });\n  },\n  has: function has(state, key) {\n    return !!state.routes.some(function (route) {\n      return route.key === key;\n    });\n  },\n  push: function push(state, route) {\n    invariant(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n    var routes = state.routes.slice();\n    routes.push(route);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      index: routes.length - 1,\n      routes: routes\n    });\n  },\n  pop: function pop(state) {\n    if (state.index <= 0) {\n      return state;\n    }\n\n    var routes = state.routes.slice(0, -1);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      index: routes.length - 1,\n      routes: routes\n    });\n  },\n  jumpToIndex: function jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      index: index\n    });\n  },\n  jumpTo: function jumpTo(state, key) {\n    var index = StateUtils.indexOf(state, key);\n    invariant(index !== -1, 'attempt to jump to unknown key \"%s\"', key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n  back: function back(state) {\n    var index = state.index - 1;\n    var route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n  forward: function forward(state) {\n    var index = state.index + 1;\n    var route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n  replaceAndPrune: function replaceAndPrune(state, key, route) {\n    var index = StateUtils.indexOf(state, key);\n    var replaced = StateUtils.replaceAtIndex(state, index, route);\n    return _objectSpread(_objectSpread({}, replaced), {}, {\n      routes: replaced.routes.slice(0, index + 1)\n    });\n  },\n  replaceAt: function replaceAt(state, key, route) {\n    var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var index = StateUtils.indexOf(state, key);\n    var nextIndex = preserveIndex ? state.index : index;\n    var nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n  replaceAtIndex: function replaceAtIndex(state, index, route) {\n    invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    var routes = state.routes.slice();\n    routes[index] = route;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      index: index,\n      routes: routes\n    });\n  },\n  reset: function reset(state, routes, index) {\n    invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');\n    var nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      var compare = function compare(route, ii) {\n        return routes[ii] === route;\n      };\n\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n    return _objectSpread(_objectSpread({}, state), {}, {\n      index: nextIndex,\n      routes: routes\n    });\n  }\n};\nexport default StateUtils;","map":{"version":3,"sources":["StateUtils.js"],"names":["StateUtils","get","state","route","indexOf","has","push","invariant","routes","index","pop","jumpToIndex","jumpTo","back","forward","replaceAndPrune","replaced","replaceAt","preserveIndex","nextIndex","nextState","replaceAtIndex","reset","Array","compare"],"mappings":"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","sourcesContent":["import invariant from './utils/invariant';\n\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\nconst StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get(state, key) {\n    return state.routes.find((route) => route.key === key) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf(state, key) {\n    return state.routes.findIndex((route) => route.key === key);\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has(state, key) {\n    return !!state.routes.some((route) => route.key === key);\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push(state, route) {\n    invariant(\n      StateUtils.indexOf(state, route.key) === -1,\n      'should not push route with duplicated key %s',\n      route.key\n    );\n\n    const routes = state.routes.slice();\n    routes.push(route);\n\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n    const routes = state.routes.slice(0, -1);\n    return {\n      ...state,\n      index: routes.length - 1,\n      routes,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n\n    return {\n      ...state,\n      index,\n    };\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo(state, key) {\n    const index = StateUtils.indexOf(state, key);\n    invariant(index !== -1, 'attempt to jump to unknown key \"%s\"', key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back(state) {\n    const index = state.index - 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward(state) {\n    const index = state.index + 1;\n    const route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune(state, key, route) {\n    const index = StateUtils.indexOf(state, key);\n    const replaced = StateUtils.replaceAtIndex(state, index, route);\n\n    return {\n      ...replaced,\n      routes: replaced.routes.slice(0, index + 1),\n    };\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt(state, key, route, preserveIndex = false) {\n    const index = StateUtils.indexOf(state, key);\n    const nextIndex = preserveIndex ? state.index : index;\n    let nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex(state, index, route) {\n    invariant(\n      !!state.routes[index],\n      'invalid index %s for replacing route %s',\n      index,\n      route.key\n    );\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    const routes = state.routes.slice();\n    routes[index] = route;\n\n    return {\n      ...state,\n      index,\n      routes,\n    };\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset(state, routes, index) {\n    invariant(\n      routes.length && Array.isArray(routes),\n      'invalid routes to replace'\n    );\n\n    const nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      const compare = (route, ii) => routes[ii] === route;\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n\n    return {\n      ...state,\n      index: nextIndex,\n      routes,\n    };\n  },\n};\n\nexport default StateUtils;\n"]},"metadata":{},"sourceType":"module"}
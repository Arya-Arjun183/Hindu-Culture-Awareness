{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport invariant from \"../utils/invariant\";\nimport getScreenForRouteName from \"./getScreenForRouteName\";\nimport createConfigGetter from \"./createConfigGetter\";\nimport * as NavigationActions from \"../NavigationActions\";\nimport * as SwitchActions from \"./SwitchActions\";\nimport * as StackActions from \"./StackActions\";\nimport validateRouteConfigMap from \"./validateRouteConfigMap\";\nimport { createPathParser } from \"./pathUtils\";\n\nvar defaultActionCreators = function defaultActionCreators() {\n  return {};\n};\n\nexport default (function (routeConfigs) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  validateRouteConfigMap(routeConfigs);\n  var order = config.order || Object.keys(routeConfigs);\n  var getCustomActionCreators = config.getCustomActionCreators || defaultActionCreators;\n  var initialRouteParams = config.initialRouteParams;\n  var initialRouteName = config.initialRouteName || order[0];\n  var backBehavior = config.backBehavior || 'none';\n  var resetOnBlur = config.hasOwnProperty('resetOnBlur') ? config.resetOnBlur : true;\n  var initialRouteIndex = order.indexOf(initialRouteName);\n\n  if (initialRouteIndex === -1) {\n    throw new Error(\"Invalid initialRouteName '\".concat(initialRouteName, \"'.\") + \"Should be one of \".concat(order.map(function (n) {\n      return \"\\\"\".concat(n, \"\\\"\");\n    }).join(', ')));\n  }\n\n  var childRouters = {};\n  order.forEach(function (routeName) {\n    childRouters[routeName] = null;\n    var screen = getScreenForRouteName(routeConfigs, routeName);\n\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    var routeConfig = routeConfigs[routeName];\n\n    if (routeConfig && routeConfig.params) {\n      return _objectSpread(_objectSpread({}, routeConfig.params), params);\n    } else {\n      return params;\n    }\n  }\n\n  var _createPathParser = createPathParser(childRouters, routeConfigs, config),\n      getPathAndParamsForRoute = _createPathParser.getPathAndParamsForRoute,\n      _getActionForPathAndParams = _createPathParser.getActionForPathAndParams;\n\n  function resetChildRoute(routeName) {\n    var initialParams = routeName === initialRouteName ? initialRouteParams : null;\n    var params = getParamsForRoute(routeName, initialParams);\n    var childRouter = childRouters[routeName];\n\n    if (childRouter) {\n      var childAction = NavigationActions.init();\n      return _objectSpread(_objectSpread({}, childRouter.getStateForAction(childAction)), {}, {\n        key: routeName,\n        routeName: routeName\n      }, params ? {\n        params: params\n      } : {});\n    }\n\n    return _objectSpread({\n      key: routeName,\n      routeName: routeName\n    }, params ? {\n      params: params\n    } : {});\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(prevState, nextState) {\n      if (backBehavior !== 'history' || prevState && nextState && nextState.index === prevState.index) {\n        return nextState;\n      }\n\n      var nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = _toConsumableArray(nextRouteKeyHistory);\n        var keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter(function (k) {\n          return k !== keyToAdd;\n        });\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = _toConsumableArray(nextRouteKeyHistory);\n        nextRouteKeyHistory.pop();\n      }\n\n      return _objectSpread(_objectSpread({}, nextState), {}, {\n        routeKeyHistory: nextRouteKeyHistory\n      });\n    }\n\n    var nextState = possibleNextState;\n\n    if (prevState && possibleNextState && prevState.index !== possibleNextState.index && resetOnBlur) {\n      var prevRouteName = prevState.routes[prevState.index].routeName;\n\n      var nextRoutes = _toConsumableArray(possibleNextState.routes);\n\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = _objectSpread(_objectSpread({}, possibleNextState), {}, {\n        routes: nextRoutes\n      });\n    }\n\n    return updateNextStateHistory(prevState, nextState);\n  }\n\n  function getInitialState() {\n    var routes = order.map(resetChildRoute);\n    var initialState = {\n      routes: routes,\n      index: initialRouteIndex\n    };\n\n    if (backBehavior === 'history') {\n      var initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n\n    return initialState;\n  }\n\n  return {\n    childRouters: childRouters,\n    getActionCreators: function getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n    getStateForAction: function getStateForAction(action, inputState) {\n      var prevState = inputState ? _objectSpread({}, inputState) : inputState;\n      var state = inputState || getInitialState();\n      var activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        var params = action.params;\n\n        if (params) {\n          state.routes = state.routes.map(function (route) {\n            return _objectSpread(_objectSpread({}, route), {}, {\n              params: _objectSpread(_objectSpread(_objectSpread({}, route.params), params), route.routeName === initialRouteName ? initialRouteParams : null)\n            });\n          });\n        }\n      }\n\n      if (action.type === SwitchActions.JUMP_TO && (action.key == null || action.key === state.key)) {\n        var _params = action.params;\n        var index = state.routes.findIndex(function (route) {\n          return route.routeName === action.routeName;\n        });\n\n        if (index === -1) {\n          throw new Error(\"There is no route named '\".concat(action.routeName, \"' in the navigator with the key '\").concat(action.key, \"'.\\n\") + \"Must be one of: \".concat(state.routes.map(function (route) {\n            return \"'\".concat(route.routeName, \"'\");\n          }).join(',')));\n        }\n\n        return getNextState(action, prevState, _objectSpread(_objectSpread({}, state), {}, {\n          routes: _params ? state.routes.map(function (route, i) {\n            return i === index ? _objectSpread(_objectSpread({}, route), {}, {\n              params: _objectSpread(_objectSpread({}, route.params), _params)\n            }) : route;\n          }) : state.routes,\n          index: index\n        }));\n      }\n\n      var activeChildLastState = state.routes[state.index];\n      var activeChildRouter = childRouters[order[state.index]];\n\n      if (activeChildRouter) {\n        var activeChildState = activeChildRouter.getStateForAction(action, activeChildLastState);\n\n        if (!activeChildState && inputState) {\n          return null;\n        }\n\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          var routes = _toConsumableArray(state.routes);\n\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, _objectSpread(_objectSpread({}, state), {}, {\n            routes: routes\n          }));\n        }\n      }\n\n      var isBackEligible = action.key == null || action.key === activeChildLastState.key;\n\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        } else if (isBackEligible && backBehavior === 'history' && state.routeKeyHistory.length > 1) {\n          var routeKey = state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        }\n      }\n\n      var didNavigate = false;\n\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find(function (childId, i) {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n\n          return false;\n        });\n\n        if (didNavigate) {\n          var childState = state.routes[activeChildIndex];\n          var childRouter = childRouters[action.routeName];\n          var newChildState = childState;\n\n          if (action.action && childRouter) {\n            var childStateUpdate = childRouter.getStateForAction(action.action, childState);\n\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = _objectSpread(_objectSpread({}, newChildState), {}, {\n              params: _objectSpread(_objectSpread({}, newChildState.params || {}), action.params)\n            });\n          }\n\n          if (newChildState !== childState) {\n            var _routes = _toConsumableArray(state.routes);\n\n            _routes[activeChildIndex] = newChildState;\n\n            var nextState = _objectSpread(_objectSpread({}, state), {}, {\n              routes: _routes,\n              index: activeChildIndex\n            });\n\n            return getNextState(action, prevState, nextState);\n          } else if (newChildState === childState && state.index === activeChildIndex && prevState) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        var key = action.key;\n        var lastRoute = state.routes.find(function (route) {\n          return route.key === key;\n        });\n\n        if (lastRoute) {\n          var _params2 = _objectSpread(_objectSpread({}, lastRoute.params), action.params);\n\n          var _routes2 = _toConsumableArray(state.routes);\n\n          _routes2[state.routes.indexOf(lastRoute)] = _objectSpread(_objectSpread({}, lastRoute), {}, {\n            params: _params2\n          });\n          return getNextState(action, prevState, _objectSpread(_objectSpread({}, state), {}, {\n            routes: _routes2\n          }));\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, _objectSpread(_objectSpread({}, state), {}, {\n          index: activeChildIndex\n        }));\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return _objectSpread({}, state);\n      }\n\n      var isActionBackOrPop = action.type === NavigationActions.BACK || action.type === StackActions.POP || action.type === StackActions.POP_TO_TOP;\n      var sendActionToInactiveChildren = !isActionBackOrPop || action.type === NavigationActions.BACK && action.key != null;\n\n      if (sendActionToInactiveChildren) {\n        var _index = state.index;\n        var _routes3 = state.routes;\n        order.find(function (childId, i) {\n          var childRouter = childRouters[childId];\n\n          if (i === _index) {\n            return false;\n          }\n\n          var childState = _routes3[i];\n\n          if (childRouter) {\n            childState = childRouter.getStateForAction(action, childState);\n          }\n\n          if (!childState) {\n            _index = i;\n            return true;\n          }\n\n          if (childState !== _routes3[i]) {\n            _routes3 = _toConsumableArray(_routes3);\n            _routes3[i] = childState;\n            _index = i;\n            return true;\n          }\n\n          return false;\n        });\n\n        if (action.preserveFocus) {\n          _index = state.index;\n        }\n\n        if (_index !== state.index || _routes3 !== state.routes) {\n          return getNextState(action, prevState, _objectSpread(_objectSpread({}, state), {}, {\n            index: _index,\n            routes: _routes3\n          }));\n        }\n      }\n\n      return state;\n    },\n    getComponentForState: function getComponentForState(state) {\n      var routeName = state.routes[state.index].routeName;\n      invariant(routeName, \"There is no route defined for index \".concat(state.index, \". Check that\\n        that you passed in a navigation state with a valid tab/screen index.\"));\n      var childRouter = childRouters[routeName];\n\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getComponentForRouteName: function getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n    getPathAndParamsForState: function getPathAndParamsForState(state) {\n      var route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n    getActionForPathAndParams: function getActionForPathAndParams(path, params) {\n      return _getActionForPathAndParams(path, params);\n    },\n    getScreenOptions: createConfigGetter(routeConfigs, config.defaultNavigationOptions)\n  };\n});","map":{"version":3,"sources":["SwitchRouter.js"],"names":["defaultActionCreators","config","validateRouteConfigMap","order","Object","getCustomActionCreators","initialRouteParams","initialRouteName","backBehavior","resetOnBlur","initialRouteIndex","n","childRouters","routeName","screen","getScreenForRouteName","routeConfig","routeConfigs","params","getActionForPathAndParams","createPathParser","initialParams","getParamsForRoute","childRouter","childAction","NavigationActions","key","prevState","nextState","nextRouteKeyHistory","action","keyToAdd","k","routeKeyHistory","possibleNextState","prevRouteName","nextRoutes","resetChildRoute","routes","updateNextStateHistory","initialState","index","initialKey","getActionCreators","getStateForAction","inputState","state","getInitialState","activeChildIndex","route","SwitchActions","getNextState","activeChildLastState","activeChildRouter","activeChildState","isBackEligible","Math","routeKey","didNavigate","childId","childState","newChildState","childStateUpdate","lastRoute","isActionBackOrPop","StackActions","sendActionToInactiveChildren","i","getComponentForState","invariant","getComponentForRouteName","getPathAndParamsForState","getPathAndParamsForRoute","getScreenOptions","createConfigGetter"],"mappings":"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","sourcesContent":["import invariant from '../utils/invariant';\nimport getScreenForRouteName from './getScreenForRouteName';\nimport createConfigGetter from './createConfigGetter';\n\nimport * as NavigationActions from '../NavigationActions';\nimport * as SwitchActions from './SwitchActions';\nimport * as StackActions from './StackActions';\nimport validateRouteConfigMap from './validateRouteConfigMap';\nimport { createPathParser } from './pathUtils';\n\nconst defaultActionCreators = () => ({});\n\nexport default (routeConfigs, config = {}) => {\n  // Fail fast on invalid route definitions\n  validateRouteConfigMap(routeConfigs);\n\n  const order = config.order || Object.keys(routeConfigs);\n\n  const getCustomActionCreators =\n    config.getCustomActionCreators || defaultActionCreators;\n\n  const { initialRouteParams } = config;\n  const initialRouteName = config.initialRouteName || order[0];\n  const backBehavior = config.backBehavior || 'none';\n  const resetOnBlur = config.hasOwnProperty('resetOnBlur')\n    ? config.resetOnBlur\n    : true;\n\n  const initialRouteIndex = order.indexOf(initialRouteName);\n  if (initialRouteIndex === -1) {\n    throw new Error(\n      `Invalid initialRouteName '${initialRouteName}'.` +\n        `Should be one of ${order.map((n) => `\"${n}\"`).join(', ')}`\n    );\n  }\n\n  const childRouters = {};\n  order.forEach((routeName) => {\n    childRouters[routeName] = null;\n    const screen = getScreenForRouteName(routeConfigs, routeName);\n    if (screen.router) {\n      childRouters[routeName] = screen.router;\n    }\n  });\n\n  function getParamsForRoute(routeName, params) {\n    let routeConfig = routeConfigs[routeName];\n    if (routeConfig && routeConfig.params) {\n      return { ...routeConfig.params, ...params };\n    } else {\n      return params;\n    }\n  }\n\n  const {\n    getPathAndParamsForRoute,\n    getActionForPathAndParams,\n  } = createPathParser(childRouters, routeConfigs, config);\n\n  function resetChildRoute(routeName) {\n    let initialParams =\n      routeName === initialRouteName ? initialRouteParams : null;\n    // note(brentvatne): merging initialRouteParams *on top* of default params\n    // on the route seems incorrect but it's consistent with existing behavior\n    // in stackrouter\n    let params = getParamsForRoute(routeName, initialParams);\n    const childRouter = childRouters[routeName];\n    if (childRouter) {\n      const childAction = NavigationActions.init();\n      return {\n        ...childRouter.getStateForAction(childAction),\n        key: routeName,\n        routeName,\n        ...(params ? { params } : {}),\n      };\n    }\n    return {\n      key: routeName,\n      routeName,\n      ...(params ? { params } : {}),\n    };\n  }\n\n  function getNextState(action, prevState, possibleNextState) {\n    function updateNextStateHistory(prevState, nextState) {\n      if (\n        backBehavior !== 'history' ||\n        (prevState && nextState && nextState.index === prevState.index)\n      ) {\n        return nextState;\n      }\n      let nextRouteKeyHistory = prevState ? prevState.routeKeyHistory : [];\n      if (action.type === NavigationActions.NAVIGATE) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        const keyToAdd = nextState.routes[nextState.index].key;\n        nextRouteKeyHistory = nextRouteKeyHistory.filter((k) => k !== keyToAdd); // dedup\n        nextRouteKeyHistory.push(keyToAdd);\n      } else if (action.type === NavigationActions.BACK) {\n        nextRouteKeyHistory = [...nextRouteKeyHistory]; // copy\n        nextRouteKeyHistory.pop();\n      }\n      return {\n        ...nextState,\n        routeKeyHistory: nextRouteKeyHistory,\n      };\n    }\n\n    let nextState = possibleNextState;\n    if (\n      prevState &&\n      possibleNextState &&\n      prevState.index !== possibleNextState.index &&\n      resetOnBlur\n    ) {\n      const prevRouteName = prevState.routes[prevState.index].routeName;\n      const nextRoutes = [...possibleNextState.routes];\n      nextRoutes[prevState.index] = resetChildRoute(prevRouteName);\n      nextState = {\n        ...possibleNextState,\n        routes: nextRoutes,\n      };\n    }\n    return updateNextStateHistory(prevState, nextState);\n  }\n\n  function getInitialState() {\n    const routes = order.map(resetChildRoute);\n    const initialState = {\n      routes,\n      index: initialRouteIndex,\n    };\n\n    if (backBehavior === 'history') {\n      const initialKey = routes[initialRouteIndex].key;\n      initialState['routeKeyHistory'] = [initialKey];\n    }\n    return initialState;\n  }\n\n  return {\n    childRouters,\n\n    getActionCreators(route, stateKey) {\n      return getCustomActionCreators(route, stateKey);\n    },\n\n    getStateForAction(action, inputState) {\n      let prevState = inputState ? { ...inputState } : inputState;\n      let state = inputState || getInitialState();\n      let activeChildIndex = state.index;\n\n      if (action.type === NavigationActions.INIT) {\n        // NOTE(brentvatne): this seems weird... why are we merging these\n        // params into child routes?\n        // ---------------------------------------------------------------\n        // Merge any params from the action into all the child routes\n        const { params } = action;\n        if (params) {\n          state.routes = state.routes.map((route) => ({\n            ...route,\n            params: {\n              ...route.params,\n              ...params,\n              ...(route.routeName === initialRouteName\n                ? initialRouteParams\n                : null),\n            },\n          }));\n        }\n      }\n\n      if (\n        action.type === SwitchActions.JUMP_TO &&\n        (action.key == null || action.key === state.key)\n      ) {\n        const { params } = action;\n        const index = state.routes.findIndex(\n          (route) => route.routeName === action.routeName\n        );\n\n        if (index === -1) {\n          throw new Error(\n            `There is no route named '${action.routeName}' in the navigator with the key '${action.key}'.\\n` +\n              `Must be one of: ${state.routes\n                .map((route) => `'${route.routeName}'`)\n                .join(',')}`\n          );\n        }\n\n        return getNextState(action, prevState, {\n          ...state,\n          routes: params\n            ? state.routes.map((route, i) =>\n                i === index\n                  ? {\n                      ...route,\n                      params: {\n                        ...route.params,\n                        ...params,\n                      },\n                    }\n                  : route\n              )\n            : state.routes,\n          index,\n        });\n      }\n\n      // Let the current child handle it\n      const activeChildLastState = state.routes[state.index];\n      const activeChildRouter = childRouters[order[state.index]];\n      if (activeChildRouter) {\n        const activeChildState = activeChildRouter.getStateForAction(\n          action,\n          activeChildLastState\n        );\n        if (!activeChildState && inputState) {\n          return null;\n        }\n        if (activeChildState && activeChildState !== activeChildLastState) {\n          const routes = [...state.routes];\n          routes[state.index] = activeChildState;\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      // Handle tab changing. Do this after letting the current tab try to\n      // handle the action, to allow inner children to change first\n      const isBackEligible =\n        action.key == null || action.key === activeChildLastState.key;\n      if (action.type === NavigationActions.BACK) {\n        if (isBackEligible && backBehavior === 'initialRoute') {\n          activeChildIndex = initialRouteIndex;\n        } else if (isBackEligible && backBehavior === 'order') {\n          activeChildIndex = Math.max(0, activeChildIndex - 1);\n        }\n        // The history contains current route, so we can only go back\n        // if there is more than one item in the history\n        else if (\n          isBackEligible &&\n          backBehavior === 'history' &&\n          state.routeKeyHistory.length > 1\n        ) {\n          const routeKey =\n            state.routeKeyHistory[state.routeKeyHistory.length - 2];\n          activeChildIndex = order.indexOf(routeKey);\n        }\n      }\n\n      let didNavigate = false;\n      if (action.type === NavigationActions.NAVIGATE) {\n        didNavigate = !!order.find((childId, i) => {\n          if (childId === action.routeName) {\n            activeChildIndex = i;\n            return true;\n          }\n          return false;\n        });\n        if (didNavigate) {\n          const childState = state.routes[activeChildIndex];\n          const childRouter = childRouters[action.routeName];\n          let newChildState = childState;\n\n          if (action.action && childRouter) {\n            const childStateUpdate = childRouter.getStateForAction(\n              action.action,\n              childState\n            );\n            if (childStateUpdate) {\n              newChildState = childStateUpdate;\n            }\n          }\n\n          if (action.params) {\n            newChildState = {\n              ...newChildState,\n              params: {\n                ...(newChildState.params || {}),\n                ...action.params,\n              },\n            };\n          }\n\n          if (newChildState !== childState) {\n            const routes = [...state.routes];\n            routes[activeChildIndex] = newChildState;\n            const nextState = {\n              ...state,\n              routes,\n              index: activeChildIndex,\n            };\n            return getNextState(action, prevState, nextState);\n          } else if (\n            newChildState === childState &&\n            state.index === activeChildIndex &&\n            prevState\n          ) {\n            return null;\n          }\n        }\n      }\n\n      if (action.type === NavigationActions.SET_PARAMS) {\n        const key = action.key;\n        const lastRoute = state.routes.find((route) => route.key === key);\n        if (lastRoute) {\n          const params = {\n            ...lastRoute.params,\n            ...action.params,\n          };\n          const routes = [...state.routes];\n          routes[state.routes.indexOf(lastRoute)] = {\n            ...lastRoute,\n            params,\n          };\n          return getNextState(action, prevState, {\n            ...state,\n            routes,\n          });\n        }\n      }\n\n      if (activeChildIndex !== state.index) {\n        return getNextState(action, prevState, {\n          ...state,\n          index: activeChildIndex,\n        });\n      } else if (didNavigate && !inputState) {\n        return state;\n      } else if (didNavigate) {\n        return { ...state };\n      }\n\n      const isActionBackOrPop =\n        action.type === NavigationActions.BACK ||\n        action.type === StackActions.POP ||\n        action.type === StackActions.POP_TO_TOP;\n      const sendActionToInactiveChildren =\n        !isActionBackOrPop ||\n        (action.type === NavigationActions.BACK && action.key != null);\n\n      // Let other children handle it and switch to the first child that returns a new state\n      // Do not do this for StackActions.POP or NavigationActions.BACK actions without a key:\n      // it would be unintuitive for these actions to switch to another tab just because that tab had a Stack that could accept a back action\n      if (sendActionToInactiveChildren) {\n        let index = state.index;\n        let routes = state.routes;\n        order.find((childId, i) => {\n          const childRouter = childRouters[childId];\n          if (i === index) {\n            return false;\n          }\n          let childState = routes[i];\n          if (childRouter) {\n            childState = childRouter.getStateForAction(action, childState);\n          }\n          if (!childState) {\n            index = i;\n            return true;\n          }\n          if (childState !== routes[i]) {\n            routes = [...routes];\n            routes[i] = childState;\n            index = i;\n            return true;\n          }\n          return false;\n        });\n\n        // Nested routers can be updated after switching children with actions such as SET_PARAMS\n        // and COMPLETE_TRANSITION.\n        if (action.preserveFocus) {\n          index = state.index;\n        }\n\n        if (index !== state.index || routes !== state.routes) {\n          return getNextState(action, prevState, {\n            ...state,\n            index,\n            routes,\n          });\n        }\n      }\n\n      return state;\n    },\n\n    getComponentForState(state) {\n      const routeName = state.routes[state.index].routeName;\n      invariant(\n        routeName,\n        `There is no route defined for index ${state.index}. Check that\n        that you passed in a navigation state with a valid tab/screen index.`\n      );\n      const childRouter = childRouters[routeName];\n      if (childRouter) {\n        return childRouter.getComponentForState(state.routes[state.index]);\n      }\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getComponentForRouteName(routeName) {\n      return getScreenForRouteName(routeConfigs, routeName);\n    },\n\n    getPathAndParamsForState(state) {\n      const route = state.routes[state.index];\n      return getPathAndParamsForRoute(route);\n    },\n\n    getActionForPathAndParams(path, params) {\n      return getActionForPathAndParams(path, params);\n    },\n\n    getScreenOptions: createConfigGetter(\n      routeConfigs,\n      config.defaultNavigationOptions\n    ),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}
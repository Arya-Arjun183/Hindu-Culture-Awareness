{"ast":null,"code":"export default function getChildRouter(router, routeName) {\n  var _router$childRouters;\n\n  if ((_router$childRouters = router.childRouters) === null || _router$childRouters === void 0 ? void 0 : _router$childRouters[routeName]) {\n    return router.childRouters[routeName];\n  }\n\n  var Component = router.getComponentForRouteName(routeName);\n  return Component.router;\n}","map":{"version":3,"sources":["getChildRouter.ts"],"names":["router","Component"],"mappings":"AAAA,eAAe,SAAA,cAAA,CAAA,MAAA,EAAA,SAAA,EAAwD;EAAA,IAAA,oBAAA;;EACrE,IAAA,CAAA,oBAAA,GAAIA,MAAM,CAAV,YAAA,MAAA,IAAA,IAAA,oBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAIA,oBAAAA,CAAJ,SAAIA,CAAJ,EAAsC;IACpC,OAAOA,MAAM,CAANA,YAAAA,CAAP,SAAOA,CAAP;EACD;;EAED,IAAMC,SAAS,GAAGD,MAAM,CAANA,wBAAAA,CAAlB,SAAkBA,CAAlB;EAEA,OAAOC,SAAS,CAAhB,MAAA;AACD","sourcesContent":["export default function getChildRouter(router: any, routeName: string) {\n  if (router.childRouters?.[routeName]) {\n    return router.childRouters[routeName];\n  }\n\n  const Component = router.getComponentForRouteName(routeName);\n\n  return Component.router;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export default function memoize(callback) {\n  var previous;\n  var result;\n  return function () {\n    var hasChanged = false;\n\n    for (var _len = arguments.length, dependencies = new Array(_len), _key = 0; _key < _len; _key++) {\n      dependencies[_key] = arguments[_key];\n    }\n\n    if (previous) {\n      if (previous.length !== dependencies.length) {\n        hasChanged = true;\n      } else {\n        for (var i = 0; i < previous.length; i++) {\n          if (previous[i] !== dependencies[i]) {\n            hasChanged = true;\n            break;\n          }\n        }\n      }\n    } else {\n      hasChanged = true;\n    }\n\n    previous = dependencies;\n\n    if (hasChanged || result === undefined) {\n      result = callback.apply(void 0, dependencies);\n    }\n\n    return result;\n  };\n}","map":{"version":3,"sources":["memoize.tsx"],"names":["hasChanged","previous","dependencies","i","result","callback"],"mappings":"AAAA,eAAe,SAAA,OAAA,CAAA,QAAA,EAEb;EACA,IAAA,QAAA;EACA,IAAA,MAAA;EAEA,OAAO,YAAmC;IACxC,IAAIA,UAAU,GAAd,KAAA;;IADwC,kCAAnC,YAAmC;MAAnC,YAAmC;IAAA;;IAGxC,IAAA,QAAA,EAAc;MACZ,IAAIC,QAAQ,CAARA,MAAAA,KAAoBC,YAAY,CAApC,MAAA,EAA6C;QAC3CF,UAAU,GAAVA,IAAAA;MADF,CAAA,MAEO;QACL,KAAK,IAAIG,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,QAAQ,CAA5B,MAAA,EAAqCE,CAArC,EAAA,EAA0C;UACxC,IAAIF,QAAQ,CAARA,CAAQ,CAARA,KAAgBC,YAAY,CAAhC,CAAgC,CAAhC,EAAqC;YACnCF,UAAU,GAAVA,IAAAA;YACA;UACD;QACF;MACF;IAVH,CAAA,MAWO;MACLA,UAAU,GAAVA,IAAAA;IACD;;IAEDC,QAAQ,GAARA,YAAAA;;IAEA,IAAID,UAAU,IAAII,MAAM,KAAxB,SAAA,EAAwC;MACtCA,MAAM,GAAGC,QAAQ,MAARA,SAATD,YAASC,CAATD;IACD;;IAED,OAAA,MAAA;EAxBF,CAAA;AA0BD","sourcesContent":["export default function memoize<Result, Deps extends readonly any[]>(\n  callback: (...deps: Deps) => Result\n) {\n  let previous: Deps | undefined;\n  let result: Result | undefined;\n\n  return (...dependencies: Deps): Result => {\n    let hasChanged = false;\n\n    if (previous) {\n      if (previous.length !== dependencies.length) {\n        hasChanged = true;\n      } else {\n        for (let i = 0; i < previous.length; i++) {\n          if (previous[i] !== dependencies[i]) {\n            hasChanged = true;\n            break;\n          }\n        }\n      }\n    } else {\n      hasChanged = true;\n    }\n\n    previous = dependencies;\n\n    if (hasChanged || result === undefined) {\n      result = callback(...dependencies);\n    }\n\n    return result;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Animated from \"react-native-web/dist/exports/Animated\";\nimport { isIphoneX } from 'react-native-iphone-x-helper';\nimport conditional from \"../utils/conditional\";\nvar add = Animated.add,\n    multiply = Animated.multiply;\nexport function forHorizontalIOS(_ref) {\n  var current = _ref.current,\n      next = _ref.next,\n      inverted = _ref.inverted,\n      screen = _ref.layouts.screen;\n  var translateFocused = multiply(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [screen.width, 0],\n    extrapolate: 'clamp'\n  }), inverted);\n  var translateUnfocused = next ? multiply(next.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, screen.width * -0.3],\n    extrapolate: 'clamp'\n  }), inverted) : 0;\n  var overlayOpacity = current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 0.07],\n    extrapolate: 'clamp'\n  });\n  var shadowOpacity = current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 0.3],\n    extrapolate: 'clamp'\n  });\n  return {\n    cardStyle: {\n      transform: [{\n        translateX: translateFocused\n      }, {\n        translateX: translateUnfocused\n      }]\n    },\n    overlayStyle: {\n      opacity: overlayOpacity\n    },\n    shadowStyle: {\n      shadowOpacity: shadowOpacity\n    }\n  };\n}\nexport function forVerticalIOS(_ref2) {\n  var current = _ref2.current,\n      inverted = _ref2.inverted,\n      screen = _ref2.layouts.screen;\n  var translateY = multiply(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [screen.height, 0],\n    extrapolate: 'clamp'\n  }), inverted);\n  return {\n    cardStyle: {\n      transform: [{\n        translateY: translateY\n      }]\n    }\n  };\n}\nexport function forModalPresentationIOS(_ref3) {\n  var index = _ref3.index,\n      current = _ref3.current,\n      next = _ref3.next,\n      inverted = _ref3.inverted,\n      screen = _ref3.layouts.screen,\n      insets = _ref3.insets;\n  var isLandscape = screen.width > screen.height;\n  var topOffset = isLandscape ? 0 : 10;\n  var statusBarHeight = insets.top;\n  var aspectRatio = screen.height / screen.width;\n  var progress = add(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }), next ? next.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }) : 0);\n  var translateY = multiply(progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [screen.height, index === 0 ? 0 : topOffset, (index === 0 ? statusBarHeight : 0) - topOffset * aspectRatio]\n  }), inverted);\n  var overlayOpacity = progress.interpolate({\n    inputRange: [0, 1, 1.0001, 2],\n    outputRange: [0, 0.3, 1, 1]\n  });\n  var scale = isLandscape ? 1 : progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [1, 1, screen.width ? 1 - topOffset * 2 / screen.width : 1]\n  });\n  var borderRadius = isLandscape ? 0 : index === 0 ? progress.interpolate({\n    inputRange: [0, 1, 1.0001, 2],\n    outputRange: [0, 0, isIphoneX() ? 38 : 0, 10]\n  }) : 10;\n  return {\n    cardStyle: {\n      overflow: 'hidden',\n      borderTopLeftRadius: borderRadius,\n      borderTopRightRadius: borderRadius,\n      marginTop: index === 0 ? 0 : statusBarHeight,\n      marginBottom: index === 0 ? 0 : topOffset,\n      transform: [{\n        translateY: translateY\n      }, {\n        scale: scale\n      }]\n    },\n    overlayStyle: {\n      opacity: overlayOpacity\n    }\n  };\n}\nexport function forFadeFromBottomAndroid(_ref4) {\n  var current = _ref4.current,\n      inverted = _ref4.inverted,\n      screen = _ref4.layouts.screen,\n      closing = _ref4.closing;\n  var translateY = multiply(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [screen.height * 0.08, 0],\n    extrapolate: 'clamp'\n  }), inverted);\n  var opacity = conditional(closing, current.progress, current.progress.interpolate({\n    inputRange: [0, 0.5, 0.9, 1],\n    outputRange: [0, 0.25, 0.7, 1]\n  }));\n  return {\n    cardStyle: {\n      opacity: opacity,\n      transform: [{\n        translateY: translateY\n      }]\n    }\n  };\n}\nexport function forRevealFromBottomAndroid(_ref5) {\n  var current = _ref5.current,\n      next = _ref5.next,\n      inverted = _ref5.inverted,\n      screen = _ref5.layouts.screen;\n  var containerTranslateY = multiply(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [screen.height, 0],\n    extrapolate: 'clamp'\n  }), inverted);\n  var cardTranslateYFocused = multiply(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [screen.height * (95.9 / 100) * -1, 0],\n    extrapolate: 'clamp'\n  }), inverted);\n  var cardTranslateYUnfocused = next ? multiply(next.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, screen.height * (2 / 100) * -1],\n    extrapolate: 'clamp'\n  }), inverted) : 0;\n  var overlayOpacity = current.progress.interpolate({\n    inputRange: [0, 0.36, 1],\n    outputRange: [0, 0.1, 0.1],\n    extrapolate: 'clamp'\n  });\n  return {\n    containerStyle: {\n      overflow: 'hidden',\n      transform: [{\n        translateY: containerTranslateY\n      }]\n    },\n    cardStyle: {\n      transform: [{\n        translateY: cardTranslateYFocused\n      }, {\n        translateY: cardTranslateYUnfocused\n      }]\n    },\n    overlayStyle: {\n      opacity: overlayOpacity\n    }\n  };\n}\nexport function forScaleFromCenterAndroid(_ref6) {\n  var current = _ref6.current,\n      next = _ref6.next,\n      closing = _ref6.closing;\n  var progress = add(current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }), next ? next.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 1],\n    extrapolate: 'clamp'\n  }) : 0);\n  var opacity = progress.interpolate({\n    inputRange: [0, 0.75, 0.875, 1, 1.0825, 1.2075, 2],\n    outputRange: [0, 0, 1, 1, 1, 1, 0]\n  });\n  var scale = conditional(closing, current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0.9, 1],\n    extrapolate: 'clamp'\n  }), progress.interpolate({\n    inputRange: [0, 1, 2],\n    outputRange: [0.85, 1, 1.1]\n  }));\n  return {\n    containerStyle: {\n      opacity: opacity,\n      transform: [{\n        scale: scale\n      }]\n    }\n  };\n}\nexport function forNoAnimation() {\n  return {};\n}","map":{"version":3,"sources":["CardStyleInterpolators.tsx"],"names":["multiply","layouts","screen","translateFocused","inputRange","outputRange","extrapolate","translateUnfocused","next","overlayOpacity","shadowOpacity","cardStyle","transform","translateX","overlayStyle","opacity","shadowStyle","translateY","insets","isLandscape","topOffset","statusBarHeight","aspectRatio","progress","add","index","scale","borderRadius","isIphoneX","overflow","borderTopLeftRadius","borderTopRightRadius","marginTop","marginBottom","closing","conditional","current","containerTranslateY","cardTranslateYFocused","cardTranslateYUnfocused","containerStyle"],"mappings":"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","sourcesContent":["import { Animated } from 'react-native';\nimport { isIphoneX } from 'react-native-iphone-x-helper';\nimport conditional from '../utils/conditional';\nimport type {\n  StackCardInterpolationProps,\n  StackCardInterpolatedStyle,\n} from '../types';\n\nconst { add, multiply } = Animated;\n\n/**\n * Standard iOS-style slide in from the right.\n */\nexport function forHorizontalIOS({\n  current,\n  next,\n  inverted,\n  layouts: { screen },\n}: StackCardInterpolationProps): StackCardInterpolatedStyle {\n  const translateFocused = multiply(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [screen.width, 0],\n      extrapolate: 'clamp',\n    }),\n    inverted\n  );\n\n  const translateUnfocused = next\n    ? multiply(\n        next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, screen.width * -0.3],\n          extrapolate: 'clamp',\n        }),\n        inverted\n      )\n    : 0;\n\n  const overlayOpacity = current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 0.07],\n    extrapolate: 'clamp',\n  });\n\n  const shadowOpacity = current.progress.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 0.3],\n    extrapolate: 'clamp',\n  });\n\n  return {\n    cardStyle: {\n      transform: [\n        // Translation for the animation of the current card\n        { translateX: translateFocused },\n        // Translation for the animation of the card on top of this\n        { translateX: translateUnfocused },\n      ],\n    },\n    overlayStyle: { opacity: overlayOpacity },\n    shadowStyle: { shadowOpacity },\n  };\n}\n\n/**\n * Standard iOS-style slide in from the bottom (used for modals).\n */\nexport function forVerticalIOS({\n  current,\n  inverted,\n  layouts: { screen },\n}: StackCardInterpolationProps): StackCardInterpolatedStyle {\n  const translateY = multiply(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [screen.height, 0],\n      extrapolate: 'clamp',\n    }),\n    inverted\n  );\n\n  return {\n    cardStyle: {\n      transform: [\n        // Translation for the animation of the current card\n        { translateY },\n      ],\n    },\n  };\n}\n\n/**\n * Standard iOS-style modal animation in iOS 13.\n */\nexport function forModalPresentationIOS({\n  index,\n  current,\n  next,\n  inverted,\n  layouts: { screen },\n  insets,\n}: StackCardInterpolationProps): StackCardInterpolatedStyle {\n  const isLandscape = screen.width > screen.height;\n  const topOffset = isLandscape ? 0 : 10;\n  const statusBarHeight = insets.top;\n  const aspectRatio = screen.height / screen.width;\n\n  const progress = add(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    }),\n    next\n      ? next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp',\n        })\n      : 0\n  );\n\n  const translateY = multiply(\n    progress.interpolate({\n      inputRange: [0, 1, 2],\n      outputRange: [\n        screen.height,\n        index === 0 ? 0 : topOffset,\n        (index === 0 ? statusBarHeight : 0) - topOffset * aspectRatio,\n      ],\n    }),\n    inverted\n  );\n\n  const overlayOpacity = progress.interpolate({\n    inputRange: [0, 1, 1.0001, 2],\n    outputRange: [0, 0.3, 1, 1],\n  });\n\n  const scale = isLandscape\n    ? 1\n    : progress.interpolate({\n        inputRange: [0, 1, 2],\n        outputRange: [\n          1,\n          1,\n          screen.width ? 1 - (topOffset * 2) / screen.width : 1,\n        ],\n      });\n\n  const borderRadius = isLandscape\n    ? 0\n    : index === 0\n    ? progress.interpolate({\n        inputRange: [0, 1, 1.0001, 2],\n        outputRange: [0, 0, isIphoneX() ? 38 : 0, 10],\n      })\n    : 10;\n\n  return {\n    cardStyle: {\n      overflow: 'hidden',\n      borderTopLeftRadius: borderRadius,\n      borderTopRightRadius: borderRadius,\n      marginTop: index === 0 ? 0 : statusBarHeight,\n      marginBottom: index === 0 ? 0 : topOffset,\n      transform: [{ translateY }, { scale }],\n    },\n    overlayStyle: { opacity: overlayOpacity },\n  };\n}\n\n/**\n * Standard Android-style fade in from the bottom for Android Oreo.\n */\nexport function forFadeFromBottomAndroid({\n  current,\n  inverted,\n  layouts: { screen },\n  closing,\n}: StackCardInterpolationProps): StackCardInterpolatedStyle {\n  const translateY = multiply(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [screen.height * 0.08, 0],\n      extrapolate: 'clamp',\n    }),\n    inverted\n  );\n\n  const opacity = conditional(\n    closing,\n    current.progress,\n    current.progress.interpolate({\n      inputRange: [0, 0.5, 0.9, 1],\n      outputRange: [0, 0.25, 0.7, 1],\n    })\n  );\n\n  return {\n    cardStyle: {\n      opacity,\n      transform: [{ translateY }],\n    },\n  };\n}\n\n/**\n * Standard Android-style reveal from the bottom for Android Pie.\n */\nexport function forRevealFromBottomAndroid({\n  current,\n  next,\n  inverted,\n  layouts: { screen },\n}: StackCardInterpolationProps): StackCardInterpolatedStyle {\n  const containerTranslateY = multiply(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [screen.height, 0],\n      extrapolate: 'clamp',\n    }),\n    inverted\n  );\n\n  const cardTranslateYFocused = multiply(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [screen.height * (95.9 / 100) * -1, 0],\n      extrapolate: 'clamp',\n    }),\n    inverted\n  );\n\n  const cardTranslateYUnfocused = next\n    ? multiply(\n        next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, screen.height * (2 / 100) * -1],\n          extrapolate: 'clamp',\n        }),\n        inverted\n      )\n    : 0;\n\n  const overlayOpacity = current.progress.interpolate({\n    inputRange: [0, 0.36, 1],\n    outputRange: [0, 0.1, 0.1],\n    extrapolate: 'clamp',\n  });\n\n  return {\n    containerStyle: {\n      overflow: 'hidden',\n      transform: [{ translateY: containerTranslateY }],\n    },\n    cardStyle: {\n      transform: [\n        { translateY: cardTranslateYFocused },\n        { translateY: cardTranslateYUnfocused },\n      ],\n    },\n    overlayStyle: { opacity: overlayOpacity },\n  };\n}\n\n/**\n * Standard Android-style reveal from the bottom for Android Q.\n */\nexport function forScaleFromCenterAndroid({\n  current,\n  next,\n  closing,\n}: StackCardInterpolationProps): StackCardInterpolatedStyle {\n  const progress = add(\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    }),\n    next\n      ? next.progress.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, 1],\n          extrapolate: 'clamp',\n        })\n      : 0\n  );\n\n  const opacity = progress.interpolate({\n    inputRange: [0, 0.75, 0.875, 1, 1.0825, 1.2075, 2],\n    outputRange: [0, 0, 1, 1, 1, 1, 0],\n  });\n\n  const scale = conditional(\n    closing,\n    current.progress.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0.9, 1],\n      extrapolate: 'clamp',\n    }),\n    progress.interpolate({\n      inputRange: [0, 1, 2],\n      outputRange: [0.85, 1, 1.1],\n    })\n  );\n\n  return {\n    containerStyle: {\n      opacity,\n      transform: [{ scale }],\n    },\n  };\n}\n\nexport function forNoAnimation(): StackCardInterpolatedStyle {\n  return {};\n}\n"]},"metadata":{},"sourceType":"module"}
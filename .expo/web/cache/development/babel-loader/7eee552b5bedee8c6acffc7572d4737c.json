{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Card from \"./Card\";\nimport HeaderHeightContext from \"../../utils/HeaderHeightContext\";\nimport HeaderShownContext from \"../../utils/HeaderShownContext\";\nimport PreviousSceneContext from \"../../utils/PreviousSceneContext\";\nimport useTheme from \"../../../utils/useTheme\";\nvar EPSILON = 0.1;\n\nfunction CardContainer(_ref) {\n  var active = _ref.active,\n      cardOverlay = _ref.cardOverlay,\n      cardOverlayEnabled = _ref.cardOverlayEnabled,\n      cardShadowEnabled = _ref.cardShadowEnabled,\n      cardStyle = _ref.cardStyle,\n      cardStyleInterpolator = _ref.cardStyleInterpolator,\n      closing = _ref.closing,\n      gesture = _ref.gesture,\n      focused = _ref.focused,\n      gestureDirection = _ref.gestureDirection,\n      gestureEnabled = _ref.gestureEnabled,\n      gestureResponseDistance = _ref.gestureResponseDistance,\n      gestureVelocityImpact = _ref.gestureVelocityImpact,\n      getPreviousScene = _ref.getPreviousScene,\n      getFocusedRoute = _ref.getFocusedRoute,\n      mode = _ref.mode,\n      headerMode = _ref.headerMode,\n      headerShown = _ref.headerShown,\n      headerStyleInterpolator = _ref.headerStyleInterpolator,\n      hasAbsoluteHeader = _ref.hasAbsoluteHeader,\n      headerHeight = _ref.headerHeight,\n      onHeaderHeightChange = _ref.onHeaderHeightChange,\n      isParentHeaderShown = _ref.isParentHeaderShown,\n      index = _ref.index,\n      layout = _ref.layout,\n      onCloseRoute = _ref.onCloseRoute,\n      onOpenRoute = _ref.onOpenRoute,\n      onPageChangeCancel = _ref.onPageChangeCancel,\n      onPageChangeConfirm = _ref.onPageChangeConfirm,\n      onPageChangeStart = _ref.onPageChangeStart,\n      onGestureCancel = _ref.onGestureCancel,\n      onGestureEnd = _ref.onGestureEnd,\n      onGestureStart = _ref.onGestureStart,\n      onTransitionEnd = _ref.onTransitionEnd,\n      onTransitionStart = _ref.onTransitionStart,\n      renderHeader = _ref.renderHeader,\n      renderScene = _ref.renderScene,\n      safeAreaInsetBottom = _ref.safeAreaInsetBottom,\n      safeAreaInsetLeft = _ref.safeAreaInsetLeft,\n      safeAreaInsetRight = _ref.safeAreaInsetRight,\n      safeAreaInsetTop = _ref.safeAreaInsetTop,\n      scene = _ref.scene,\n      transitionSpec = _ref.transitionSpec;\n\n  var handleOpen = function handleOpen() {\n    var route = scene.route;\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: route\n    }, false);\n    onOpenRoute({\n      route: route\n    });\n  };\n\n  var handleClose = function handleClose() {\n    var route = scene.route;\n    onTransitionEnd === null || onTransitionEnd === void 0 ? void 0 : onTransitionEnd({\n      route: route\n    }, true);\n    onCloseRoute({\n      route: route\n    });\n  };\n\n  var handleGestureBegin = function handleGestureBegin() {\n    var route = scene.route;\n    onPageChangeStart === null || onPageChangeStart === void 0 ? void 0 : onPageChangeStart();\n    onGestureStart === null || onGestureStart === void 0 ? void 0 : onGestureStart({\n      route: route\n    });\n  };\n\n  var handleGestureCanceled = function handleGestureCanceled() {\n    var route = scene.route;\n    onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    onGestureCancel === null || onGestureCancel === void 0 ? void 0 : onGestureCancel({\n      route: route\n    });\n  };\n\n  var handleGestureEnd = function handleGestureEnd() {\n    var route = scene.route;\n    onGestureEnd === null || onGestureEnd === void 0 ? void 0 : onGestureEnd({\n      route: route\n    });\n  };\n\n  var handleTransition = function handleTransition(_ref2) {\n    var closing = _ref2.closing,\n        gesture = _ref2.gesture;\n    var route = scene.route;\n\n    if (!gesture) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(true);\n    } else if (active && closing) {\n      onPageChangeConfirm === null || onPageChangeConfirm === void 0 ? void 0 : onPageChangeConfirm(false);\n    } else {\n      onPageChangeCancel === null || onPageChangeCancel === void 0 ? void 0 : onPageChangeCancel();\n    }\n\n    onTransitionStart === null || onTransitionStart === void 0 ? void 0 : onTransitionStart({\n      route: route\n    }, closing);\n  };\n\n  var insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft\n  };\n\n  var _useTheme = useTheme(),\n      colors = _useTheme.colors;\n\n  var _React$useState = React.useState('box-none'),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      pointerEvents = _React$useState2[0],\n      setPointerEvents = _React$useState2[1];\n\n  React.useEffect(function () {\n    var _scene$progress$next, _scene$progress$next$;\n\n    var listener = (_scene$progress$next = scene.progress.next) === null || _scene$progress$next === void 0 ? void 0 : (_scene$progress$next$ = _scene$progress$next.addListener) === null || _scene$progress$next$ === void 0 ? void 0 : _scene$progress$next$.call(_scene$progress$next, function (_ref3) {\n      var value = _ref3.value;\n      setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n    });\n    return function () {\n      if (listener) {\n        var _scene$progress$next2, _scene$progress$next3;\n\n        (_scene$progress$next2 = scene.progress.next) === null || _scene$progress$next2 === void 0 ? void 0 : (_scene$progress$next3 = _scene$progress$next2.removeListener) === null || _scene$progress$next3 === void 0 ? void 0 : _scene$progress$next3.call(_scene$progress$next2, listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n  var isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  var previousScene = getPreviousScene({\n    route: scene.route\n  });\n  return React.createElement(Card, {\n    index: index,\n    gestureDirection: gestureDirection,\n    layout: layout,\n    insets: insets,\n    gesture: gesture,\n    current: scene.progress.current,\n    next: scene.progress.next,\n    closing: closing,\n    onOpen: handleOpen,\n    onClose: handleClose,\n    overlay: cardOverlay,\n    overlayEnabled: cardOverlayEnabled,\n    shadowEnabled: cardShadowEnabled,\n    onTransition: handleTransition,\n    onGestureBegin: handleGestureBegin,\n    onGestureCanceled: handleGestureCanceled,\n    onGestureEnd: handleGestureEnd,\n    gestureEnabled: gestureEnabled,\n    gestureResponseDistance: gestureResponseDistance,\n    gestureVelocityImpact: gestureVelocityImpact,\n    transitionSpec: transitionSpec,\n    styleInterpolator: cardStyleInterpolator,\n    accessibilityElementsHidden: !focused,\n    importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n    pointerEvents: active ? 'box-none' : pointerEvents,\n    pageOverflowEnabled: headerMode === 'screen' && mode === 'card',\n    containerStyle: hasAbsoluteHeader ? {\n      marginTop: headerHeight\n    } : null,\n    contentStyle: [{\n      backgroundColor: colors.background\n    }, cardStyle],\n    style: [{\n      overflow: active ? undefined : 'hidden'\n    }, StyleSheet.absoluteFill]\n  }, React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.scene\n  }, React.createElement(PreviousSceneContext.Provider, {\n    value: previousScene\n  }, React.createElement(HeaderShownContext.Provider, {\n    value: isParentHeaderShown || isCurrentHeaderShown\n  }, React.createElement(HeaderHeightContext.Provider, {\n    value: headerHeight\n  }, renderScene({\n    route: scene.route\n  }))))), headerMode === 'screen' ? renderHeader({\n    mode: 'screen',\n    layout: layout,\n    insets: insets,\n    scenes: [previousScene, scene],\n    getPreviousScene: getPreviousScene,\n    getFocusedRoute: getFocusedRoute,\n    gestureDirection: gestureDirection,\n    styleInterpolator: headerStyleInterpolator,\n    onContentHeightChange: onHeaderHeightChange\n  }) : null));\n}\n\nexport default React.memo(CardContainer);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse'\n  },\n  scene: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["CardContainer.tsx"],"names":["EPSILON","transitionSpec","handleOpen","route","onTransitionEnd","onOpenRoute","handleClose","onCloseRoute","handleGestureBegin","onPageChangeStart","onGestureStart","handleGestureCanceled","onPageChangeCancel","onGestureCancel","handleGestureEnd","onGestureEnd","handleTransition","gesture","onPageChangeConfirm","active","onTransitionStart","insets","top","right","bottom","left","safeAreaInsetLeft","colors","useTheme","React","listener","value","setPointerEvents","scene","isCurrentHeaderShown","headerMode","headerShown","previousScene","getPreviousScene","focused","mode","hasAbsoluteHeader","marginTop","headerHeight","backgroundColor","background","overflow","StyleSheet","styles","container","isParentHeaderShown","renderScene","renderHeader","layout","scenes","getFocusedRoute","gestureDirection","styleInterpolator","onContentHeightChange","onHeaderHeightChange","flex","flexDirection"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport Card from './Card';\nimport HeaderHeightContext from '../../utils/HeaderHeightContext';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nimport useTheme from '../../../utils/useTheme';\nimport type {\n  Route,\n  Scene,\n  Layout,\n  StackHeaderMode,\n  StackCardMode,\n  TransitionPreset,\n} from '../../types';\n\ntype Props = TransitionPreset & {\n  index: number;\n  active: boolean;\n  focused: boolean;\n  closing: boolean;\n  layout: Layout;\n  gesture: Animated.Value;\n  scene: Scene<Route<string>>;\n  safeAreaInsetTop: number;\n  safeAreaInsetRight: number;\n  safeAreaInsetBottom: number;\n  safeAreaInsetLeft: number;\n  cardOverlay?: (props: {\n    style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  }) => React.ReactNode;\n  cardOverlayEnabled?: boolean;\n  cardShadowEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n  getPreviousScene: (props: {\n    route: Route<string>;\n  }) => Scene<Route<string>> | undefined;\n  getFocusedRoute: () => Route<string>;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  renderScene: (props: { route: Route<string> }) => React.ReactNode;\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  onTransitionStart?: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd?: (props: { route: Route<string> }, closing: boolean) => void;\n  onPageChangeStart?: () => void;\n  onPageChangeConfirm?: (force: boolean) => void;\n  onPageChangeCancel?: () => void;\n  onGestureStart?: (props: { route: Route<string> }) => void;\n  onGestureEnd?: (props: { route: Route<string> }) => void;\n  onGestureCancel?: (props: { route: Route<string> }) => void;\n  gestureEnabled?: boolean;\n  gestureResponseDistance?: {\n    vertical?: number;\n    horizontal?: number;\n  };\n  gestureVelocityImpact?: number;\n  mode: StackCardMode;\n  headerMode: StackHeaderMode;\n  headerShown: boolean;\n  hasAbsoluteHeader: boolean;\n  headerHeight: number;\n  onHeaderHeightChange: (props: {\n    route: Route<string>;\n    height: number;\n  }) => void;\n  isParentHeaderShown: boolean;\n};\n\nconst EPSILON = 0.1;\n\nfunction CardContainer({\n  active,\n  cardOverlay,\n  cardOverlayEnabled,\n  cardShadowEnabled,\n  cardStyle,\n  cardStyleInterpolator,\n  closing,\n  gesture,\n  focused,\n  gestureDirection,\n  gestureEnabled,\n  gestureResponseDistance,\n  gestureVelocityImpact,\n  getPreviousScene,\n  getFocusedRoute,\n  mode,\n  headerMode,\n  headerShown,\n  headerStyleInterpolator,\n  hasAbsoluteHeader,\n  headerHeight,\n  onHeaderHeightChange,\n  isParentHeaderShown,\n  index,\n  layout,\n  onCloseRoute,\n  onOpenRoute,\n  onPageChangeCancel,\n  onPageChangeConfirm,\n  onPageChangeStart,\n  onGestureCancel,\n  onGestureEnd,\n  onGestureStart,\n  onTransitionEnd,\n  onTransitionStart,\n  renderHeader,\n  renderScene,\n  safeAreaInsetBottom,\n  safeAreaInsetLeft,\n  safeAreaInsetRight,\n  safeAreaInsetTop,\n  scene,\n  transitionSpec,\n}: Props) {\n  const handleOpen = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, false);\n    onOpenRoute({ route });\n  };\n\n  const handleClose = () => {\n    const { route } = scene;\n\n    onTransitionEnd?.({ route }, true);\n    onCloseRoute({ route });\n  };\n\n  const handleGestureBegin = () => {\n    const { route } = scene;\n\n    onPageChangeStart?.();\n    onGestureStart?.({ route });\n  };\n\n  const handleGestureCanceled = () => {\n    const { route } = scene;\n\n    onPageChangeCancel?.();\n    onGestureCancel?.({ route });\n  };\n\n  const handleGestureEnd = () => {\n    const { route } = scene;\n\n    onGestureEnd?.({ route });\n  };\n\n  const handleTransition = ({\n    closing,\n    gesture,\n  }: {\n    closing: boolean;\n    gesture: boolean;\n  }) => {\n    const { route } = scene;\n\n    if (!gesture) {\n      onPageChangeConfirm?.(true);\n    } else if (active && closing) {\n      onPageChangeConfirm?.(false);\n    } else {\n      onPageChangeCancel?.();\n    }\n\n    onTransitionStart?.({ route }, closing);\n  };\n\n  const insets = {\n    top: safeAreaInsetTop,\n    right: safeAreaInsetRight,\n    bottom: safeAreaInsetBottom,\n    left: safeAreaInsetLeft,\n  };\n\n  const { colors } = useTheme();\n\n  const [pointerEvents, setPointerEvents] = React.useState<'box-none' | 'none'>(\n    'box-none'\n  );\n\n  React.useEffect(() => {\n    // @ts-expect-error: AnimatedInterpolation optionally has addListener, but the type defs don't think so\n    const listener = scene.progress.next?.addListener?.(\n      ({ value }: { value: number }) => {\n        setPointerEvents(value <= EPSILON ? 'box-none' : 'none');\n      }\n    );\n\n    return () => {\n      if (listener) {\n        // @ts-expect-error: AnimatedInterpolation optionally has removedListener, but the type defs don't think so\n        scene.progress.next?.removeListener?.(listener);\n      }\n    };\n  }, [pointerEvents, scene.progress.next]);\n\n  const isCurrentHeaderShown = headerMode !== 'none' && headerShown !== false;\n  const previousScene = getPreviousScene({ route: scene.route });\n\n  return (\n    <Card\n      index={index}\n      gestureDirection={gestureDirection}\n      layout={layout}\n      insets={insets}\n      gesture={gesture}\n      current={scene.progress.current}\n      next={scene.progress.next}\n      closing={closing}\n      onOpen={handleOpen}\n      onClose={handleClose}\n      overlay={cardOverlay}\n      overlayEnabled={cardOverlayEnabled}\n      shadowEnabled={cardShadowEnabled}\n      onTransition={handleTransition}\n      onGestureBegin={handleGestureBegin}\n      onGestureCanceled={handleGestureCanceled}\n      onGestureEnd={handleGestureEnd}\n      gestureEnabled={gestureEnabled}\n      gestureResponseDistance={gestureResponseDistance}\n      gestureVelocityImpact={gestureVelocityImpact}\n      transitionSpec={transitionSpec}\n      styleInterpolator={cardStyleInterpolator}\n      accessibilityElementsHidden={!focused}\n      importantForAccessibility={focused ? 'auto' : 'no-hide-descendants'}\n      pointerEvents={active ? 'box-none' : pointerEvents}\n      pageOverflowEnabled={headerMode === 'screen' && mode === 'card'}\n      containerStyle={hasAbsoluteHeader ? { marginTop: headerHeight } : null}\n      contentStyle={[{ backgroundColor: colors.background }, cardStyle]}\n      style={[\n        {\n          // This is necessary to avoid unfocused larger pages increasing scroll area\n          // The issue can be seen on the web when a smaller screen is pushed over a larger one\n          overflow: active ? undefined : 'hidden',\n        },\n        StyleSheet.absoluteFill,\n      ]}\n    >\n      <View style={styles.container}>\n        <View style={styles.scene}>\n          <PreviousSceneContext.Provider value={previousScene}>\n            <HeaderShownContext.Provider\n              value={isParentHeaderShown || isCurrentHeaderShown}\n            >\n              <HeaderHeightContext.Provider value={headerHeight}>\n                {renderScene({ route: scene.route })}\n              </HeaderHeightContext.Provider>\n            </HeaderShownContext.Provider>\n          </PreviousSceneContext.Provider>\n        </View>\n        {headerMode === 'screen'\n          ? renderHeader({\n              mode: 'screen',\n              layout,\n              insets,\n              scenes: [previousScene, scene],\n              getPreviousScene,\n              getFocusedRoute,\n              gestureDirection,\n              styleInterpolator: headerStyleInterpolator,\n              onContentHeightChange: onHeaderHeightChange,\n            })\n          : null}\n      </View>\n    </Card>\n  );\n}\n\nexport default React.memo(CardContainer);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n  },\n  scene: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"export default function getEventManager(target) {\n  var listeners = {};\n\n  var removeListener = function removeListener(type, callback) {\n    var callbacks = listeners[type] ? listeners[type][target] : undefined;\n\n    if (!callbacks) {\n      return;\n    }\n\n    var index = callbacks.indexOf(callback);\n    callbacks.splice(index, 1);\n  };\n\n  var addListener = function addListener(type, callback) {\n    listeners[type] = listeners[type] || {};\n    listeners[type][target] = listeners[type][target] || [];\n    listeners[type][target].push(callback);\n    return {\n      remove: function remove() {\n        return removeListener(type, callback);\n      }\n    };\n  };\n\n  return {\n    addListener: addListener,\n    emit: function emit(type, data) {\n      var items = listeners[type] || {};\n      var callbacks = items[target] && items[target].slice();\n      callbacks === null || callbacks === void 0 ? void 0 : callbacks.forEach(function (cb) {\n        return cb(data);\n      });\n    }\n  };\n}","map":{"version":3,"sources":["getEventManager.js"],"names":["listeners","removeListener","callbacks","index","addListener","remove","emit","items","cb"],"mappings":"AAKA,eAAe,SAAA,eAAA,CAAA,MAAA,EAAiC;EAI9C,IAAMA,SAAS,GAAf,EAAA;;EAMA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAA,IAAA,EAAA,QAAA,EAAoB;IACzC,IAAMC,SAAS,GAAGF,SAAS,CAATA,IAAS,CAATA,GAAkBA,SAAS,CAATA,IAAS,CAATA,CAAlBA,MAAkBA,CAAlBA,GAAlB,SAAA;;IAEA,IAAI,CAAJ,SAAA,EAAgB;MACd;IACD;;IAED,IAAMG,KAAK,GAAGD,SAAS,CAATA,OAAAA,CAAd,QAAcA,CAAd;IAEAA,SAAS,CAATA,MAAAA,CAAAA,KAAAA,EAAAA,CAAAA;EATF,CAAA;;EAgBA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAAA,IAAA,EAAA,QAAA,EAAoB;IACtCJ,SAAS,CAATA,IAAS,CAATA,GAAkBA,SAAS,CAATA,IAAS,CAATA,IAAlBA,EAAAA;IACAA,SAAS,CAATA,IAAS,CAATA,CAAAA,MAAAA,IAA0BA,SAAS,CAATA,IAAS,CAATA,CAAAA,MAAAA,KAA1BA,EAAAA;IACAA,SAAS,CAATA,IAAS,CAATA,CAAAA,MAAAA,EAAAA,IAAAA,CAAAA,QAAAA;IAEA,OAAO;MACLK,MAAM,EAAE;QAAA,OAAMJ,cAAc,CAAA,IAAA,EAAA,QAAA,CAApB;MAAA;IADH,CAAP;EALF,CAAA;;EAUA,OAAO;IACLG,WADK,EACLA,WADK;IAOLE,IAAI,EAAE,cAAA,IAAA,EAAA,IAAA,EAAgB;MACpB,IAAMC,KAAK,GAAGP,SAAS,CAATA,IAAS,CAATA,IAAd,EAAA;MAMA,IAAME,SAAS,GAAGK,KAAK,CAALA,MAAK,CAALA,IAAiBA,KAAK,CAALA,MAAK,CAALA,CAAnC,KAAmCA,EAAnC;MAEAL,SAAS,KAATA,IAAAA,IAAAA,SAAS,KAAA,KAATA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,SAAS,CAATA,OAAAA,CAAoBM,UAAAA,EAAD;QAAA,OAAQA,EAAE,CAA7BN,IAA6B,CAAV;MAAA,CAAnBA,CAAAA;IACD;EAjBI,CAAP;AAmBD","sourcesContent":["// @ts-check\n\n/**\n * @param {string} target\n */\nexport default function getEventManager(target) {\n  /**\n   * @type {Record<string, Record<string, ((e: any) => void)[]>>}\n   */\n  const listeners = {};\n\n  /**\n   * @param {string} type\n   * @param {() => void} callback\n   */\n  const removeListener = (type, callback) => {\n    const callbacks = listeners[type] ? listeners[type][target] : undefined;\n\n    if (!callbacks) {\n      return;\n    }\n\n    const index = callbacks.indexOf(callback);\n\n    callbacks.splice(index, 1);\n  };\n\n  /**\n   * @param {string} type\n   * @param {() => void} callback\n   */\n  const addListener = (type, callback) => {\n    listeners[type] = listeners[type] || {};\n    listeners[type][target] = listeners[type][target] || [];\n    listeners[type][target].push(callback);\n\n    return {\n      remove: () => removeListener(type, callback),\n    };\n  };\n\n  return {\n    addListener,\n\n    /**\n     * @param {string} type\n     * @param {any} [data]\n     */\n    emit: (type, data) => {\n      const items = listeners[type] || {};\n\n      /**\n       * Copy the current list of callbacks in case they are mutated during execution\n       * @type {((data: any) => void)[] | undefined}\n       */\n      const callbacks = items[target] && items[target].slice();\n\n      callbacks?.forEach((cb) => cb(data));\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
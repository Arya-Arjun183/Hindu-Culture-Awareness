{"ast":null,"code":"var validateFormat = function validateFormat() {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nexport default function invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1;\n    throw error;\n  }\n}","map":{"version":3,"sources":["invariant.js"],"names":["validateFormat","process","format","error","args","argIndex"],"mappings":"AAWA,IAAIA,cAAc,GAAG,0BAAY,CAAjC,CAAA;;AAEA,IAAIC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,KAAJ,YAAA,EAA2C;EACzCD,cAAc,GAAG,wBAAA,MAAA,EAAkB;IACjC,IAAIE,MAAM,KAAV,SAAA,EAA0B;MACxB,MAAM,IAAA,KAAA,CAAN,8CAAM,CAAN;IACD;EAHHF,CAAAA;AAKD;;AAED,eAAe,SAAA,SAAA,CAAA,SAAA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAwD;EACrEA,cAAc,CAAdA,MAAc,CAAdA;;EAEA,IAAI,CAAJ,SAAA,EAAgB;IACd,IAAA,KAAA;;IACA,IAAIE,MAAM,KAAV,SAAA,EAA0B;MACxBC,KAAK,GAAG,IAAA,KAAA,CAARA,+HAAQ,CAARA;IADF,CAAA,MAIO;MACL,IAAIC,IAAI,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAX,CAAW,CAAX;MACA,IAAIC,QAAQ,GAAZ,CAAA;MACAF,KAAK,GAAG,IAAA,KAAA,CACN,MAAM,CAAN,OAAA,CAAA,KAAA,EAAsB,YAAY;QAChC,OAAOC,IAAI,CAACC,QAAZ,EAAW,CAAX;MAFJF,CACE,CADM,CAARA;MAKAA,KAAK,CAALA,IAAAA,GAAAA,qBAAAA;IACD;;IAEDA,KAAK,CAALA,WAAAA,GAjBc,CAiBdA;IACA,MAAA,KAAA;EACD;AACF","sourcesContent":["/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function () {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function (format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nexport default function invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function () {\n          return args[argIndex++];\n        })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}